// initialization 
@256
D=A
@SP
A=M
M=D
@Sys.init
0;JEQ
// writeFunction Main.fibonacci 0 
// writeLabel Main.fibonacci 
(Main.fibonacci)
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2 
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// less than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-330288312
D;JLT
@SP
A=M
M=0
(SKIP.TO.-330288312)
@SP
M=M+1
// writeIf IF_TRUE 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE
D;JNE
// writeGoto IF_FALSE 
@IF_FALSE
0;JEQ
// writeLabel IF_TRUE 
(IF_TRUE)
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeReturn 
@LCL
D=M
@FRAME
M=D
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JEQ
// writeLabel IF_FALSE 
(IF_FALSE)
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2 
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=M-D
@SP
M=M+1
// writeCall Main.fibonacci 1 
@Main.fibonacci.return-address.32766
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Main.fibonacci 
@Main.fibonacci
0;JEQ
// writeLabel Main.fibonacci.return-address.32766 
(Main.fibonacci.return-address.32766)
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=M-D
@SP
M=M+1
// writeCall Main.fibonacci 1 
@Main.fibonacci.return-address.32767
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Main.fibonacci 
@Main.fibonacci
0;JEQ
// writeLabel Main.fibonacci.return-address.32767 
(Main.fibonacci.return-address.32767)
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// writeReturn 
@LCL
D=M
@FRAME
M=D
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JEQ
// writeFunction Sys.init 0 
// writeLabel Sys.init 
(Sys.init)
// push constant 4 
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Main.fibonacci 1 
@Main.fibonacci.return-address.32768
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Main.fibonacci 
@Main.fibonacci
0;JEQ
// writeLabel Main.fibonacci.return-address.32768 
(Main.fibonacci.return-address.32768)
// writeLabel WHILE 
(WHILE)
// writeGoto WHILE 
@WHILE
0;JEQ
(END)
@END
0;JEQ
