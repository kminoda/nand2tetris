// initialization 
@256
D=A
@SP
A=M
M=D
@Sys.init
0;JEQ
// writeFunction Square.new 0 
// writeLabel Square.new 
(Square.new)
// push constant 3 
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Memory.alloc 1 
@Memory.alloc.return-address.32766
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Memory.alloc 
@Memory.alloc
0;JEQ
// writeLabel Memory.alloc.return-address.32766 
(Memory.alloc.return-address.32766)
// pop pointer 0 
@SP
M=M-1
@SP
A=M
D=M
@THIS
M=D
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop this 0 
@SP
M=M-1
@SP
A=M
D=M
@THIS
A=M
M=D
// push argument 1 
@ARG
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop this 1 
@SP
M=M-1
@SP
A=M
D=M
@THIS
A=M
A=A+1
M=D
// push argument 2 
@ARG
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop this 2 
@SP
M=M-1
@SP
A=M
D=M
@THIS
A=M
A=A+1
A=A+1
M=D
// push pointer 0 
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeCall Square.draw 1 
@Square.draw.return-address.32767
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Square.draw 
@Square.draw
0;JEQ
// writeLabel Square.draw.return-address.32767 
(Square.draw.return-address.32767)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push pointer 0 
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeReturn 
@LCL
D=M
@FRAME
M=D
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JEQ
// writeFunction Square.dispose 0 
// writeLabel Square.dispose 
(Square.dispose)
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop pointer 0 
@SP
M=M-1
@SP
A=M
D=M
@THIS
M=D
// push pointer 0 
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeCall Memory.deAlloc 1 
@Memory.deAlloc.return-address.32768
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Memory.deAlloc 
@Memory.deAlloc
0;JEQ
// writeLabel Memory.deAlloc.return-address.32768 
(Memory.deAlloc.return-address.32768)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeReturn 
@LCL
D=M
@FRAME
M=D
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JEQ
// writeFunction Square.draw 0 
// writeLabel Square.draw 
(Square.draw)
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop pointer 0 
@SP
M=M-1
@SP
A=M
D=M
@THIS
M=D
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not 
@SP
M=M-1
@SP
A=M
D=M
M=!D
@SP
M=M+1
// writeCall Screen.setColor 1 
@Screen.setColor.return-address.32769
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Screen.setColor 
@Screen.setColor
0;JEQ
// writeLabel Screen.setColor.return-address.32769 
(Screen.setColor.return-address.32769)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push this 0 
@THIS
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 1 
@THIS
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 0 
@THIS
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 2 
@THIS
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push this 1 
@THIS
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 2 
@THIS
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// writeCall Screen.drawRectangle 4 
@Screen.drawRectangle.return-address.32770
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@9
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Screen.drawRectangle 
@Screen.drawRectangle
0;JEQ
// writeLabel Screen.drawRectangle.return-address.32770 
(Screen.drawRectangle.return-address.32770)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeReturn 
@LCL
D=M
@FRAME
M=D
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JEQ
// writeFunction Square.erase 0 
// writeLabel Square.erase 
(Square.erase)
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop pointer 0 
@SP
M=M-1
@SP
A=M
D=M
@THIS
M=D
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Screen.setColor 1 
@Screen.setColor.return-address.32771
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Screen.setColor 
@Screen.setColor
0;JEQ
// writeLabel Screen.setColor.return-address.32771 
(Screen.setColor.return-address.32771)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push this 0 
@THIS
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 1 
@THIS
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 0 
@THIS
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 2 
@THIS
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push this 1 
@THIS
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 2 
@THIS
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// writeCall Screen.drawRectangle 4 
@Screen.drawRectangle.return-address.32772
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@9
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Screen.drawRectangle 
@Screen.drawRectangle
0;JEQ
// writeLabel Screen.drawRectangle.return-address.32772 
(Screen.drawRectangle.return-address.32772)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeReturn 
@LCL
D=M
@FRAME
M=D
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JEQ
// writeFunction Square.incSize 0 
// writeLabel Square.incSize 
(Square.incSize)
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop pointer 0 
@SP
M=M-1
@SP
A=M
D=M
@THIS
M=D
// push this 1 
@THIS
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 2 
@THIS
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push constant 254 
@254
D=A
@SP
A=M
M=D
@SP
M=M+1
// less than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504188050
D;JLT
@SP
A=M
M=0
(SKIP.TO.-504188050)
@SP
M=M+1
// push this 0 
@THIS
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 2 
@THIS
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push constant 510 
@510
D=A
@SP
A=M
M=D
@SP
M=M+1
// less than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504188048
D;JLT
@SP
A=M
M=0
(SKIP.TO.-504188048)
@SP
M=M+1
// and 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D&M
@SP
M=M+1
// writeIf IF_TRUE0 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE0
D;JNE
// writeGoto IF_FALSE0 
@IF_FALSE0
0;JEQ
// writeLabel IF_TRUE0 
(IF_TRUE0)
// push pointer 0 
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeCall Square.erase 1 
@Square.erase.return-address.32773
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Square.erase 
@Square.erase
0;JEQ
// writeLabel Square.erase.return-address.32773 
(Square.erase.return-address.32773)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push this 2 
@THIS
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2 
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop this 2 
@SP
M=M-1
@SP
A=M
D=M
@THIS
A=M
A=A+1
A=A+1
M=D
// push pointer 0 
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeCall Square.draw 1 
@Square.draw.return-address.32774
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Square.draw 
@Square.draw
0;JEQ
// writeLabel Square.draw.return-address.32774 
(Square.draw.return-address.32774)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// writeLabel IF_FALSE0 
(IF_FALSE0)
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeReturn 
@LCL
D=M
@FRAME
M=D
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JEQ
// writeFunction Square.decSize 0 
// writeLabel Square.decSize 
(Square.decSize)
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop pointer 0 
@SP
M=M-1
@SP
A=M
D=M
@THIS
M=D
// push this 2 
@THIS
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2 
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// greater than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504188045
D;JGT
@SP
A=M
M=0
(SKIP.TO.-504188045)
@SP
M=M+1
// writeIf IF_TRUE0 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE0
D;JNE
// writeGoto IF_FALSE0 
@IF_FALSE0
0;JEQ
// writeLabel IF_TRUE0 
(IF_TRUE0)
// push pointer 0 
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeCall Square.erase 1 
@Square.erase.return-address.32775
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Square.erase 
@Square.erase
0;JEQ
// writeLabel Square.erase.return-address.32775 
(Square.erase.return-address.32775)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push this 2 
@THIS
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2 
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=M-D
@SP
M=M+1
// pop this 2 
@SP
M=M-1
@SP
A=M
D=M
@THIS
A=M
A=A+1
A=A+1
M=D
// push pointer 0 
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeCall Square.draw 1 
@Square.draw.return-address.32776
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Square.draw 
@Square.draw
0;JEQ
// writeLabel Square.draw.return-address.32776 
(Square.draw.return-address.32776)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// writeLabel IF_FALSE0 
(IF_FALSE0)
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeReturn 
@LCL
D=M
@FRAME
M=D
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JEQ
// writeFunction Square.moveUp 0 
// writeLabel Square.moveUp 
(Square.moveUp)
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop pointer 0 
@SP
M=M-1
@SP
A=M
D=M
@THIS
M=D
// push this 1 
@THIS
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// greater than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504188043
D;JGT
@SP
A=M
M=0
(SKIP.TO.-504188043)
@SP
M=M+1
// writeIf IF_TRUE0 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE0
D;JNE
// writeGoto IF_FALSE0 
@IF_FALSE0
0;JEQ
// writeLabel IF_TRUE0 
(IF_TRUE0)
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Screen.setColor 1 
@Screen.setColor.return-address.32777
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Screen.setColor 
@Screen.setColor
0;JEQ
// writeLabel Screen.setColor.return-address.32777 
(Screen.setColor.return-address.32777)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push this 0 
@THIS
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 1 
@THIS
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 2 
@THIS
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=M-D
@SP
M=M+1
// push this 0 
@THIS
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 2 
@THIS
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push this 1 
@THIS
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 2 
@THIS
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// writeCall Screen.drawRectangle 4 
@Screen.drawRectangle.return-address.32778
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@9
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Screen.drawRectangle 
@Screen.drawRectangle
0;JEQ
// writeLabel Screen.drawRectangle.return-address.32778 
(Screen.drawRectangle.return-address.32778)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push this 1 
@THIS
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2 
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=M-D
@SP
M=M+1
// pop this 1 
@SP
M=M-1
@SP
A=M
D=M
@THIS
A=M
A=A+1
M=D
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not 
@SP
M=M-1
@SP
A=M
D=M
M=!D
@SP
M=M+1
// writeCall Screen.setColor 1 
@Screen.setColor.return-address.32779
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Screen.setColor 
@Screen.setColor
0;JEQ
// writeLabel Screen.setColor.return-address.32779 
(Screen.setColor.return-address.32779)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push this 0 
@THIS
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 1 
@THIS
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 0 
@THIS
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 2 
@THIS
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push this 1 
@THIS
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// writeCall Screen.drawRectangle 4 
@Screen.drawRectangle.return-address.32780
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@9
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Screen.drawRectangle 
@Screen.drawRectangle
0;JEQ
// writeLabel Screen.drawRectangle.return-address.32780 
(Screen.drawRectangle.return-address.32780)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// writeLabel IF_FALSE0 
(IF_FALSE0)
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeReturn 
@LCL
D=M
@FRAME
M=D
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JEQ
// writeFunction Square.moveDown 0 
// writeLabel Square.moveDown 
(Square.moveDown)
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop pointer 0 
@SP
M=M-1
@SP
A=M
D=M
@THIS
M=D
// push this 1 
@THIS
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 2 
@THIS
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push constant 254 
@254
D=A
@SP
A=M
M=D
@SP
M=M+1
// less than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504188033
D;JLT
@SP
A=M
M=0
(SKIP.TO.-504188033)
@SP
M=M+1
// writeIf IF_TRUE0 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE0
D;JNE
// writeGoto IF_FALSE0 
@IF_FALSE0
0;JEQ
// writeLabel IF_TRUE0 
(IF_TRUE0)
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Screen.setColor 1 
@Screen.setColor.return-address.32781
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Screen.setColor 
@Screen.setColor
0;JEQ
// writeLabel Screen.setColor.return-address.32781 
(Screen.setColor.return-address.32781)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push this 0 
@THIS
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 1 
@THIS
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 0 
@THIS
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 2 
@THIS
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push this 1 
@THIS
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// writeCall Screen.drawRectangle 4 
@Screen.drawRectangle.return-address.32782
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@9
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Screen.drawRectangle 
@Screen.drawRectangle
0;JEQ
// writeLabel Screen.drawRectangle.return-address.32782 
(Screen.drawRectangle.return-address.32782)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push this 1 
@THIS
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2 
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop this 1 
@SP
M=M-1
@SP
A=M
D=M
@THIS
A=M
A=A+1
M=D
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not 
@SP
M=M-1
@SP
A=M
D=M
M=!D
@SP
M=M+1
// writeCall Screen.setColor 1 
@Screen.setColor.return-address.32783
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Screen.setColor 
@Screen.setColor
0;JEQ
// writeLabel Screen.setColor.return-address.32783 
(Screen.setColor.return-address.32783)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push this 0 
@THIS
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 1 
@THIS
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 2 
@THIS
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=M-D
@SP
M=M+1
// push this 0 
@THIS
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 2 
@THIS
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push this 1 
@THIS
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 2 
@THIS
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// writeCall Screen.drawRectangle 4 
@Screen.drawRectangle.return-address.32784
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@9
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Screen.drawRectangle 
@Screen.drawRectangle
0;JEQ
// writeLabel Screen.drawRectangle.return-address.32784 
(Screen.drawRectangle.return-address.32784)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// writeLabel IF_FALSE0 
(IF_FALSE0)
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeReturn 
@LCL
D=M
@FRAME
M=D
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JEQ
// writeFunction Square.moveLeft 0 
// writeLabel Square.moveLeft 
(Square.moveLeft)
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop pointer 0 
@SP
M=M-1
@SP
A=M
D=M
@THIS
M=D
// push this 0 
@THIS
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// greater than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504188024
D;JGT
@SP
A=M
M=0
(SKIP.TO.-504188024)
@SP
M=M+1
// writeIf IF_TRUE0 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE0
D;JNE
// writeGoto IF_FALSE0 
@IF_FALSE0
0;JEQ
// writeLabel IF_TRUE0 
(IF_TRUE0)
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Screen.setColor 1 
@Screen.setColor.return-address.32785
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Screen.setColor 
@Screen.setColor
0;JEQ
// writeLabel Screen.setColor.return-address.32785 
(Screen.setColor.return-address.32785)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push this 0 
@THIS
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 2 
@THIS
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=M-D
@SP
M=M+1
// push this 1 
@THIS
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 0 
@THIS
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 2 
@THIS
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push this 1 
@THIS
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 2 
@THIS
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// writeCall Screen.drawRectangle 4 
@Screen.drawRectangle.return-address.32786
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@9
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Screen.drawRectangle 
@Screen.drawRectangle
0;JEQ
// writeLabel Screen.drawRectangle.return-address.32786 
(Screen.drawRectangle.return-address.32786)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push this 0 
@THIS
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2 
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=M-D
@SP
M=M+1
// pop this 0 
@SP
M=M-1
@SP
A=M
D=M
@THIS
A=M
M=D
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not 
@SP
M=M-1
@SP
A=M
D=M
M=!D
@SP
M=M+1
// writeCall Screen.setColor 1 
@Screen.setColor.return-address.32787
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Screen.setColor 
@Screen.setColor
0;JEQ
// writeLabel Screen.setColor.return-address.32787 
(Screen.setColor.return-address.32787)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push this 0 
@THIS
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 1 
@THIS
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 0 
@THIS
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push this 1 
@THIS
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 2 
@THIS
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// writeCall Screen.drawRectangle 4 
@Screen.drawRectangle.return-address.32788
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@9
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Screen.drawRectangle 
@Screen.drawRectangle
0;JEQ
// writeLabel Screen.drawRectangle.return-address.32788 
(Screen.drawRectangle.return-address.32788)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// writeLabel IF_FALSE0 
(IF_FALSE0)
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeReturn 
@LCL
D=M
@FRAME
M=D
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JEQ
// writeFunction Square.moveRight 0 
// writeLabel Square.moveRight 
(Square.moveRight)
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop pointer 0 
@SP
M=M-1
@SP
A=M
D=M
@THIS
M=D
// push this 0 
@THIS
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 2 
@THIS
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push constant 510 
@510
D=A
@SP
A=M
M=D
@SP
M=M+1
// less than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504188014
D;JLT
@SP
A=M
M=0
(SKIP.TO.-504188014)
@SP
M=M+1
// writeIf IF_TRUE0 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE0
D;JNE
// writeGoto IF_FALSE0 
@IF_FALSE0
0;JEQ
// writeLabel IF_TRUE0 
(IF_TRUE0)
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Screen.setColor 1 
@Screen.setColor.return-address.32789
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Screen.setColor 
@Screen.setColor
0;JEQ
// writeLabel Screen.setColor.return-address.32789 
(Screen.setColor.return-address.32789)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push this 0 
@THIS
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 1 
@THIS
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 0 
@THIS
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push this 1 
@THIS
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 2 
@THIS
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// writeCall Screen.drawRectangle 4 
@Screen.drawRectangle.return-address.32790
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@9
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Screen.drawRectangle 
@Screen.drawRectangle
0;JEQ
// writeLabel Screen.drawRectangle.return-address.32790 
(Screen.drawRectangle.return-address.32790)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push this 0 
@THIS
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2 
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop this 0 
@SP
M=M-1
@SP
A=M
D=M
@THIS
A=M
M=D
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not 
@SP
M=M-1
@SP
A=M
D=M
M=!D
@SP
M=M+1
// writeCall Screen.setColor 1 
@Screen.setColor.return-address.32791
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Screen.setColor 
@Screen.setColor
0;JEQ
// writeLabel Screen.setColor.return-address.32791 
(Screen.setColor.return-address.32791)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push this 0 
@THIS
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 2 
@THIS
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=M-D
@SP
M=M+1
// push this 1 
@THIS
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 0 
@THIS
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 2 
@THIS
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push this 1 
@THIS
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 2 
@THIS
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// writeCall Screen.drawRectangle 4 
@Screen.drawRectangle.return-address.32792
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@9
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Screen.drawRectangle 
@Screen.drawRectangle
0;JEQ
// writeLabel Screen.drawRectangle.return-address.32792 
(Screen.drawRectangle.return-address.32792)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// writeLabel IF_FALSE0 
(IF_FALSE0)
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeReturn 
@LCL
D=M
@FRAME
M=D
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JEQ
// writeFunction String.new 0 
// writeLabel String.new 
(String.new)
// push constant 3 
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Memory.alloc 1 
@Memory.alloc.return-address.32793
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Memory.alloc 
@Memory.alloc
0;JEQ
// writeLabel Memory.alloc.return-address.32793 
(Memory.alloc.return-address.32793)
// pop pointer 0 
@SP
M=M-1
@SP
A=M
D=M
@THIS
M=D
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// less than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504188005
D;JLT
@SP
A=M
M=0
(SKIP.TO.-504188005)
@SP
M=M+1
// writeIf IF_TRUE0 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE0
D;JNE
// writeGoto IF_FALSE0 
@IF_FALSE0
0;JEQ
// writeLabel IF_TRUE0 
(IF_TRUE0)
// push constant 14 
@14
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Sys.error 1 
@Sys.error.return-address.32794
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Sys.error 
@Sys.error
0;JEQ
// writeLabel Sys.error.return-address.32794 
(Sys.error.return-address.32794)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// writeLabel IF_FALSE0 
(IF_FALSE0)
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// greater than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504188004
D;JGT
@SP
A=M
M=0
(SKIP.TO.-504188004)
@SP
M=M+1
// writeIf IF_TRUE1 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE1
D;JNE
// writeGoto IF_FALSE1 
@IF_FALSE1
0;JEQ
// writeLabel IF_TRUE1 
(IF_TRUE1)
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeCall Array.new 1 
@Array.new.return-address.32795
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Array.new 
@Array.new
0;JEQ
// writeLabel Array.new.return-address.32795 
(Array.new.return-address.32795)
// pop this 1 
@SP
M=M-1
@SP
A=M
D=M
@THIS
A=M
A=A+1
M=D
// writeLabel IF_FALSE1 
(IF_FALSE1)
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop this 0 
@SP
M=M-1
@SP
A=M
D=M
@THIS
A=M
M=D
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop this 2 
@SP
M=M-1
@SP
A=M
D=M
@THIS
A=M
A=A+1
A=A+1
M=D
// push pointer 0 
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeReturn 
@LCL
D=M
@FRAME
M=D
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JEQ
// writeFunction String.dispose 0 
// writeLabel String.dispose 
(String.dispose)
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop pointer 0 
@SP
M=M-1
@SP
A=M
D=M
@THIS
M=D
// push this 0 
@THIS
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// greater than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504188003
D;JGT
@SP
A=M
M=0
(SKIP.TO.-504188003)
@SP
M=M+1
// writeIf IF_TRUE0 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE0
D;JNE
// writeGoto IF_FALSE0 
@IF_FALSE0
0;JEQ
// writeLabel IF_TRUE0 
(IF_TRUE0)
// push this 1 
@THIS
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeCall Array.dispose 1 
@Array.dispose.return-address.32796
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Array.dispose 
@Array.dispose
0;JEQ
// writeLabel Array.dispose.return-address.32796 
(Array.dispose.return-address.32796)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// writeLabel IF_FALSE0 
(IF_FALSE0)
// push pointer 0 
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeCall Memory.deAlloc 1 
@Memory.deAlloc.return-address.32797
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Memory.deAlloc 
@Memory.deAlloc
0;JEQ
// writeLabel Memory.deAlloc.return-address.32797 
(Memory.deAlloc.return-address.32797)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeReturn 
@LCL
D=M
@FRAME
M=D
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JEQ
// writeFunction String.length 0 
// writeLabel String.length 
(String.length)
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop pointer 0 
@SP
M=M-1
@SP
A=M
D=M
@THIS
M=D
// push this 2 
@THIS
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeReturn 
@LCL
D=M
@FRAME
M=D
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JEQ
// writeFunction String.charAt 0 
// writeLabel String.charAt 
(String.charAt)
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop pointer 0 
@SP
M=M-1
@SP
A=M
D=M
@THIS
M=D
// push argument 1 
@ARG
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// less than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504188002
D;JLT
@SP
A=M
M=0
(SKIP.TO.-504188002)
@SP
M=M+1
// push argument 1 
@ARG
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 2 
@THIS
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// greater than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504188001
D;JGT
@SP
A=M
M=0
(SKIP.TO.-504188001)
@SP
M=M+1
// or 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D|M
@SP
M=M+1
// push argument 1 
@ARG
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 2 
@THIS
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// equal 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187999
D;JEQ
@SP
A=M
M=0
(SKIP.TO.-504187999)
@SP
M=M+1
// or 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D|M
@SP
M=M+1
// writeIf IF_TRUE0 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE0
D;JNE
// writeGoto IF_FALSE0 
@IF_FALSE0
0;JEQ
// writeLabel IF_TRUE0 
(IF_TRUE0)
// push constant 15 
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Sys.error 1 
@Sys.error.return-address.32798
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Sys.error 
@Sys.error
0;JEQ
// writeLabel Sys.error.return-address.32798 
(Sys.error.return-address.32798)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// writeLabel IF_FALSE0 
(IF_FALSE0)
// push argument 1 
@ARG
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 1 
@THIS
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push that 0 
@THAT
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeReturn 
@LCL
D=M
@FRAME
M=D
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JEQ
// writeFunction String.setCharAt 0 
// writeLabel String.setCharAt 
(String.setCharAt)
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop pointer 0 
@SP
M=M-1
@SP
A=M
D=M
@THIS
M=D
// push argument 1 
@ARG
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// less than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187996
D;JLT
@SP
A=M
M=0
(SKIP.TO.-504187996)
@SP
M=M+1
// push argument 1 
@ARG
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 2 
@THIS
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// greater than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187995
D;JGT
@SP
A=M
M=0
(SKIP.TO.-504187995)
@SP
M=M+1
// or 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D|M
@SP
M=M+1
// push argument 1 
@ARG
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 2 
@THIS
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// equal 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187993
D;JEQ
@SP
A=M
M=0
(SKIP.TO.-504187993)
@SP
M=M+1
// or 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D|M
@SP
M=M+1
// writeIf IF_TRUE0 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE0
D;JNE
// writeGoto IF_FALSE0 
@IF_FALSE0
0;JEQ
// writeLabel IF_TRUE0 
(IF_TRUE0)
// push constant 16 
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Sys.error 1 
@Sys.error.return-address.32799
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Sys.error 
@Sys.error
0;JEQ
// writeLabel Sys.error.return-address.32799 
(Sys.error.return-address.32799)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// writeLabel IF_FALSE0 
(IF_FALSE0)
// push argument 1 
@ARG
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 1 
@THIS
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push argument 2 
@ARG
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push temp 0 
@R5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0 
@SP
M=M-1
@SP
A=M
D=M
@THAT
A=M
M=D
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeReturn 
@LCL
D=M
@FRAME
M=D
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JEQ
// writeFunction String.appendChar 0 
// writeLabel String.appendChar 
(String.appendChar)
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop pointer 0 
@SP
M=M-1
@SP
A=M
D=M
@THIS
M=D
// push this 2 
@THIS
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 0 
@THIS
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// equal 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187990
D;JEQ
@SP
A=M
M=0
(SKIP.TO.-504187990)
@SP
M=M+1
// writeIf IF_TRUE0 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE0
D;JNE
// writeGoto IF_FALSE0 
@IF_FALSE0
0;JEQ
// writeLabel IF_TRUE0 
(IF_TRUE0)
// push constant 17 
@17
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Sys.error 1 
@Sys.error.return-address.32800
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Sys.error 
@Sys.error
0;JEQ
// writeLabel Sys.error.return-address.32800 
(Sys.error.return-address.32800)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// writeLabel IF_FALSE0 
(IF_FALSE0)
// push this 2 
@THIS
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 1 
@THIS
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push argument 1 
@ARG
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push temp 0 
@R5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0 
@SP
M=M-1
@SP
A=M
D=M
@THAT
A=M
M=D
// push this 2 
@THIS
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop this 2 
@SP
M=M-1
@SP
A=M
D=M
@THIS
A=M
A=A+1
A=A+1
M=D
// push pointer 0 
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeReturn 
@LCL
D=M
@FRAME
M=D
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JEQ
// writeFunction String.eraseLastChar 0 
// writeLabel String.eraseLastChar 
(String.eraseLastChar)
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop pointer 0 
@SP
M=M-1
@SP
A=M
D=M
@THIS
M=D
// push this 2 
@THIS
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// equal 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187987
D;JEQ
@SP
A=M
M=0
(SKIP.TO.-504187987)
@SP
M=M+1
// writeIf IF_TRUE0 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE0
D;JNE
// writeGoto IF_FALSE0 
@IF_FALSE0
0;JEQ
// writeLabel IF_TRUE0 
(IF_TRUE0)
// push constant 18 
@18
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Sys.error 1 
@Sys.error.return-address.32801
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Sys.error 
@Sys.error
0;JEQ
// writeLabel Sys.error.return-address.32801 
(Sys.error.return-address.32801)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// writeLabel IF_FALSE0 
(IF_FALSE0)
// push this 2 
@THIS
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=M-D
@SP
M=M+1
// pop this 2 
@SP
M=M-1
@SP
A=M
D=M
@THIS
A=M
A=A+1
A=A+1
M=D
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeReturn 
@LCL
D=M
@FRAME
M=D
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JEQ
// writeFunction String.intValue 5 
// writeLabel String.intValue 
(String.intValue)
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop pointer 0 
@SP
M=M-1
@SP
A=M
D=M
@THIS
M=D
// push this 2 
@THIS
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// equal 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187985
D;JEQ
@SP
A=M
M=0
(SKIP.TO.-504187985)
@SP
M=M+1
// writeIf IF_TRUE0 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE0
D;JNE
// writeGoto IF_FALSE0 
@IF_FALSE0
0;JEQ
// writeLabel IF_TRUE0 
(IF_TRUE0)
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeReturn 
@LCL
D=M
@FRAME
M=D
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JEQ
// writeLabel IF_FALSE0 
(IF_FALSE0)
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not 
@SP
M=M-1
@SP
A=M
D=M
M=!D
@SP
M=M+1
// pop local 3 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
A=A+1
A=A+1
M=D
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push this 1 
@THIS
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push that 0 
@THAT
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 45 
@45
D=A
@SP
A=M
M=D
@SP
M=M+1
// equal 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187982
D;JEQ
@SP
A=M
M=0
(SKIP.TO.-504187982)
@SP
M=M+1
// writeIf IF_TRUE1 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE1
D;JNE
// writeGoto IF_FALSE1 
@IF_FALSE1
0;JEQ
// writeLabel IF_TRUE1 
(IF_TRUE1)
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not 
@SP
M=M-1
@SP
A=M
D=M
M=!D
@SP
M=M+1
// pop local 4 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
A=A+1
A=A+1
A=A+1
M=D
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop local 0 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
M=D
// writeLabel IF_FALSE1 
(IF_FALSE1)
// writeLabel WHILE_EXP0 
(WHILE_EXP0)
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 2 
@THIS
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// less than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187980
D;JLT
@SP
A=M
M=0
(SKIP.TO.-504187980)
@SP
M=M+1
// push local 3 
@LCL
A=M
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// and 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D&M
@SP
M=M+1
// not 
@SP
M=M-1
@SP
A=M
D=M
M=!D
@SP
M=M+1
// writeIf WHILE_END0 
@SP
M=M-1
@SP
A=M
D=M
@WHILE_END0
D;JNE
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 1 
@THIS
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push that 0 
@THAT
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 48 
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=M-D
@SP
M=M+1
// pop local 2 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
A=A+1
M=D
// push local 2 
@LCL
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// less than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187975
D;JLT
@SP
A=M
M=0
(SKIP.TO.-504187975)
@SP
M=M+1
// push local 2 
@LCL
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 9 
@9
D=A
@SP
A=M
M=D
@SP
M=M+1
// greater than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187974
D;JGT
@SP
A=M
M=0
(SKIP.TO.-504187974)
@SP
M=M+1
// or 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D|M
@SP
M=M+1
// not 
@SP
M=M-1
@SP
A=M
D=M
M=!D
@SP
M=M+1
// pop local 3 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
A=A+1
A=A+1
M=D
// push local 3 
@LCL
A=M
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeIf IF_TRUE2 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE2
D;JNE
// writeGoto IF_FALSE2 
@IF_FALSE2
0;JEQ
// writeLabel IF_TRUE2 
(IF_TRUE2)
// push local 1 
@LCL
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 10 
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Math.multiply 2 
@Math.multiply.return-address.32802
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Math.multiply 
@Math.multiply
0;JEQ
// writeLabel Math.multiply.return-address.32802 
(Math.multiply.return-address.32802)
// push local 2 
@LCL
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop local 1 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
M=D
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop local 0 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
M=D
// writeLabel IF_FALSE2 
(IF_FALSE2)
// writeGoto WHILE_EXP0 
@WHILE_EXP0
0;JEQ
// writeLabel WHILE_END0 
(WHILE_END0)
// push local 4 
@LCL
A=M
A=A+1
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeIf IF_TRUE3 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE3
D;JNE
// writeGoto IF_FALSE3 
@IF_FALSE3
0;JEQ
// writeLabel IF_TRUE3 
(IF_TRUE3)
// push local 1 
@LCL
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// neg 
@SP
M=M-1
@SP
A=M
D=M
M=-M
@SP
M=M+1
// pop local 1 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
M=D
// writeLabel IF_FALSE3 
(IF_FALSE3)
// push local 1 
@LCL
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeReturn 
@LCL
D=M
@FRAME
M=D
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JEQ
// writeFunction String.setInt 4 
// writeLabel String.setInt 
(String.setInt)
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop pointer 0 
@SP
M=M-1
@SP
A=M
D=M
@THIS
M=D
// push this 0 
@THIS
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// equal 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187968
D;JEQ
@SP
A=M
M=0
(SKIP.TO.-504187968)
@SP
M=M+1
// writeIf IF_TRUE0 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE0
D;JNE
// writeGoto IF_FALSE0 
@IF_FALSE0
0;JEQ
// writeLabel IF_TRUE0 
(IF_TRUE0)
// push constant 19 
@19
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Sys.error 1 
@Sys.error.return-address.32803
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Sys.error 
@Sys.error
0;JEQ
// writeLabel Sys.error.return-address.32803 
(Sys.error.return-address.32803)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// writeLabel IF_FALSE0 
(IF_FALSE0)
// push constant 6 
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Array.new 1 
@Array.new.return-address.32804
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Array.new 
@Array.new
0;JEQ
// writeLabel Array.new.return-address.32804 
(Array.new.return-address.32804)
// pop local 2 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
A=A+1
M=D
// push argument 1 
@ARG
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// less than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187967
D;JLT
@SP
A=M
M=0
(SKIP.TO.-504187967)
@SP
M=M+1
// writeIf IF_TRUE1 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE1
D;JNE
// writeGoto IF_FALSE1 
@IF_FALSE1
0;JEQ
// writeLabel IF_TRUE1 
(IF_TRUE1)
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not 
@SP
M=M-1
@SP
A=M
D=M
M=!D
@SP
M=M+1
// pop local 3 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
A=A+1
A=A+1
M=D
// push argument 1 
@ARG
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// neg 
@SP
M=M-1
@SP
A=M
D=M
M=-M
@SP
M=M+1
// pop argument 1 
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
A=A+1
M=D
// writeLabel IF_FALSE1 
(IF_FALSE1)
// push argument 1 
@ARG
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop local 1 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
M=D
// writeLabel WHILE_EXP0 
(WHILE_EXP0)
// push local 1 
@LCL
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// greater than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187964
D;JGT
@SP
A=M
M=0
(SKIP.TO.-504187964)
@SP
M=M+1
// not 
@SP
M=M-1
@SP
A=M
D=M
M=!D
@SP
M=M+1
// writeIf WHILE_END0 
@SP
M=M-1
@SP
A=M
D=M
@WHILE_END0
D;JNE
// push argument 1 
@ARG
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 10 
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Math.divide 2 
@Math.divide.return-address.32805
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Math.divide 
@Math.divide
0;JEQ
// writeLabel Math.divide.return-address.32805 
(Math.divide.return-address.32805)
// pop local 1 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
M=D
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 2 
@LCL
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push constant 48 
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// push argument 1 
@ARG
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 1 
@LCL
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 10 
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Math.multiply 2 
@Math.multiply.return-address.32806
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Math.multiply 
@Math.multiply
0;JEQ
// writeLabel Math.multiply.return-address.32806 
(Math.multiply.return-address.32806)
// sub 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=M-D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push temp 0 
@R5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0 
@SP
M=M-1
@SP
A=M
D=M
@THAT
A=M
M=D
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop local 0 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
M=D
// push local 1 
@LCL
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop argument 1 
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
A=A+1
M=D
// writeGoto WHILE_EXP0 
@WHILE_EXP0
0;JEQ
// writeLabel WHILE_END0 
(WHILE_END0)
// push local 3 
@LCL
A=M
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeIf IF_TRUE2 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE2
D;JNE
// writeGoto IF_FALSE2 
@IF_FALSE2
0;JEQ
// writeLabel IF_TRUE2 
(IF_TRUE2)
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 2 
@LCL
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push constant 45 
@45
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push temp 0 
@R5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0 
@SP
M=M-1
@SP
A=M
D=M
@THAT
A=M
M=D
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop local 0 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
M=D
// writeLabel IF_FALSE2 
(IF_FALSE2)
// push this 0 
@THIS
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// less than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187956
D;JLT
@SP
A=M
M=0
(SKIP.TO.-504187956)
@SP
M=M+1
// writeIf IF_TRUE3 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE3
D;JNE
// writeGoto IF_FALSE3 
@IF_FALSE3
0;JEQ
// writeLabel IF_TRUE3 
(IF_TRUE3)
// push constant 19 
@19
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Sys.error 1 
@Sys.error.return-address.32807
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Sys.error 
@Sys.error
0;JEQ
// writeLabel Sys.error.return-address.32807 
(Sys.error.return-address.32807)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// writeLabel IF_FALSE3 
(IF_FALSE3)
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// equal 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187955
D;JEQ
@SP
A=M
M=0
(SKIP.TO.-504187955)
@SP
M=M+1
// writeIf IF_TRUE4 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE4
D;JNE
// writeGoto IF_FALSE4 
@IF_FALSE4
0;JEQ
// writeLabel IF_TRUE4 
(IF_TRUE4)
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push this 1 
@THIS
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push constant 48 
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push temp 0 
@R5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0 
@SP
M=M-1
@SP
A=M
D=M
@THAT
A=M
M=D
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop this 2 
@SP
M=M-1
@SP
A=M
D=M
@THIS
A=M
A=A+1
A=A+1
M=D
// writeGoto IF_END4 
@IF_END4
0;JEQ
// writeLabel IF_FALSE4 
(IF_FALSE4)
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop this 2 
@SP
M=M-1
@SP
A=M
D=M
@THIS
A=M
A=A+1
A=A+1
M=D
// writeLabel WHILE_EXP1 
(WHILE_EXP1)
// push this 2 
@THIS
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// less than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187953
D;JLT
@SP
A=M
M=0
(SKIP.TO.-504187953)
@SP
M=M+1
// not 
@SP
M=M-1
@SP
A=M
D=M
M=!D
@SP
M=M+1
// writeIf WHILE_END1 
@SP
M=M-1
@SP
A=M
D=M
@WHILE_END1
D;JNE
// push this 2 
@THIS
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 1 
@THIS
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 2 
@THIS
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// sub 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=M-D
@SP
M=M+1
// push local 2 
@LCL
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push that 0 
@THAT
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push temp 0 
@R5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0 
@SP
M=M-1
@SP
A=M
D=M
@THAT
A=M
M=D
// push this 2 
@THIS
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop this 2 
@SP
M=M-1
@SP
A=M
D=M
@THIS
A=M
A=A+1
A=A+1
M=D
// writeGoto WHILE_EXP1 
@WHILE_EXP1
0;JEQ
// writeLabel WHILE_END1 
(WHILE_END1)
// writeLabel IF_END4 
(IF_END4)
// push local 2 
@LCL
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeCall Array.dispose 1 
@Array.dispose.return-address.32808
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Array.dispose 
@Array.dispose
0;JEQ
// writeLabel Array.dispose.return-address.32808 
(Array.dispose.return-address.32808)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeReturn 
@LCL
D=M
@FRAME
M=D
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JEQ
// writeFunction String.newLine 0 
// writeLabel String.newLine 
(String.newLine)
// push constant 128 
@128
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeReturn 
@LCL
D=M
@FRAME
M=D
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JEQ
// writeFunction String.backSpace 0 
// writeLabel String.backSpace 
(String.backSpace)
// push constant 129 
@129
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeReturn 
@LCL
D=M
@FRAME
M=D
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JEQ
// writeFunction String.doubleQuote 0 
// writeLabel String.doubleQuote 
(String.doubleQuote)
// push constant 34 
@34
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeReturn 
@LCL
D=M
@FRAME
M=D
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JEQ
// writeFunction Math.init 1 
// writeLabel Math.init 
(Math.init)
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 16 
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Array.new 1 
@Array.new.return-address.32809
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Array.new 
@Array.new
0;JEQ
// writeLabel Array.new.return-address.32809 
(Array.new.return-address.32809)
// pop static 1 
@SP
M=M-1
@SP
A=M
D=M
@Math.1
M=D
// push constant 16 
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Array.new 1 
@Array.new.return-address.32810
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Array.new 
@Array.new
0;JEQ
// writeLabel Array.new.return-address.32810 
(Array.new.return-address.32810)
// pop static 0 
@SP
M=M-1
@SP
A=M
D=M
@Math.0
M=D
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push static 0 
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push temp 0 
@R5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0 
@SP
M=M-1
@SP
A=M
D=M
@THAT
A=M
M=D
// writeLabel WHILE_EXP0 
(WHILE_EXP0)
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 15 
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// less than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187945
D;JLT
@SP
A=M
M=0
(SKIP.TO.-504187945)
@SP
M=M+1
// not 
@SP
M=M-1
@SP
A=M
D=M
M=!D
@SP
M=M+1
// writeIf WHILE_END0 
@SP
M=M-1
@SP
A=M
D=M
@WHILE_END0
D;JNE
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop local 0 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
M=D
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push static 0 
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=M-D
@SP
M=M+1
// push static 0 
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push that 0 
@THAT
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=M-D
@SP
M=M+1
// push static 0 
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push that 0 
@THAT
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push temp 0 
@R5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0 
@SP
M=M-1
@SP
A=M
D=M
@THAT
A=M
M=D
// writeGoto WHILE_EXP0 
@WHILE_EXP0
0;JEQ
// writeLabel WHILE_END0 
(WHILE_END0)
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeReturn 
@LCL
D=M
@FRAME
M=D
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JEQ
// writeFunction Math.abs 0 
// writeLabel Math.abs 
(Math.abs)
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// less than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187936
D;JLT
@SP
A=M
M=0
(SKIP.TO.-504187936)
@SP
M=M+1
// writeIf IF_TRUE0 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE0
D;JNE
// writeGoto IF_FALSE0 
@IF_FALSE0
0;JEQ
// writeLabel IF_TRUE0 
(IF_TRUE0)
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// neg 
@SP
M=M-1
@SP
A=M
D=M
M=-M
@SP
M=M+1
// pop argument 0 
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
// writeLabel IF_FALSE0 
(IF_FALSE0)
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeReturn 
@LCL
D=M
@FRAME
M=D
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JEQ
// writeFunction Math.multiply 5 
// writeLabel Math.multiply 
(Math.multiply)
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// less than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187934
D;JLT
@SP
A=M
M=0
(SKIP.TO.-504187934)
@SP
M=M+1
// push argument 1 
@ARG
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// greater than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187933
D;JGT
@SP
A=M
M=0
(SKIP.TO.-504187933)
@SP
M=M+1
// and 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D&M
@SP
M=M+1
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// greater than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187931
D;JGT
@SP
A=M
M=0
(SKIP.TO.-504187931)
@SP
M=M+1
// push argument 1 
@ARG
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// less than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187930
D;JLT
@SP
A=M
M=0
(SKIP.TO.-504187930)
@SP
M=M+1
// and 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D&M
@SP
M=M+1
// or 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D|M
@SP
M=M+1
// pop local 4 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
A=A+1
A=A+1
A=A+1
M=D
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeCall Math.abs 1 
@Math.abs.return-address.32811
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Math.abs 
@Math.abs
0;JEQ
// writeLabel Math.abs.return-address.32811 
(Math.abs.return-address.32811)
// pop argument 0 
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
// push argument 1 
@ARG
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeCall Math.abs 1 
@Math.abs.return-address.32812
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Math.abs 
@Math.abs
0;JEQ
// writeLabel Math.abs.return-address.32812 
(Math.abs.return-address.32812)
// pop argument 1 
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
A=A+1
M=D
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push argument 1 
@ARG
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// less than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187927
D;JLT
@SP
A=M
M=0
(SKIP.TO.-504187927)
@SP
M=M+1
// writeIf IF_TRUE0 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE0
D;JNE
// writeGoto IF_FALSE0 
@IF_FALSE0
0;JEQ
// writeLabel IF_TRUE0 
(IF_TRUE0)
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop local 1 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
M=D
// push argument 1 
@ARG
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop argument 0 
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
// push local 1 
@LCL
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop argument 1 
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
A=A+1
M=D
// writeLabel IF_FALSE0 
(IF_FALSE0)
// writeLabel WHILE_EXP0 
(WHILE_EXP0)
// push local 2 
@LCL
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=M-D
@SP
M=M+1
// push argument 1 
@ARG
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=M-D
@SP
M=M+1
// less than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187924
D;JLT
@SP
A=M
M=0
(SKIP.TO.-504187924)
@SP
M=M+1
// not 
@SP
M=M-1
@SP
A=M
D=M
M=!D
@SP
M=M+1
// writeIf WHILE_END0 
@SP
M=M-1
@SP
A=M
D=M
@WHILE_END0
D;JNE
// push local 3 
@LCL
A=M
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push static 0 
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push that 0 
@THAT
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push argument 1 
@ARG
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// and 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D&M
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// equal 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187920
D;JEQ
@SP
A=M
M=0
(SKIP.TO.-504187920)
@SP
M=M+1
// not 
@SP
M=M-1
@SP
A=M
D=M
M=!D
@SP
M=M+1
// writeIf IF_TRUE1 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE1
D;JNE
// writeGoto IF_FALSE1 
@IF_FALSE1
0;JEQ
// writeLabel IF_TRUE1 
(IF_TRUE1)
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop local 0 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
M=D
// push local 2 
@LCL
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 3 
@LCL
A=M
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push static 0 
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push that 0 
@THAT
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop local 2 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
A=A+1
M=D
// writeLabel IF_FALSE1 
(IF_FALSE1)
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop argument 0 
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
// push local 3 
@LCL
A=M
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop local 3 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
A=A+1
A=A+1
M=D
// writeGoto WHILE_EXP0 
@WHILE_EXP0
0;JEQ
// writeLabel WHILE_END0 
(WHILE_END0)
// push local 4 
@LCL
A=M
A=A+1
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeIf IF_TRUE2 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE2
D;JNE
// writeGoto IF_FALSE2 
@IF_FALSE2
0;JEQ
// writeLabel IF_TRUE2 
(IF_TRUE2)
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// neg 
@SP
M=M-1
@SP
A=M
D=M
M=-M
@SP
M=M+1
// pop local 0 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
M=D
// writeLabel IF_FALSE2 
(IF_FALSE2)
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeReturn 
@LCL
D=M
@FRAME
M=D
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JEQ
// writeFunction Math.divide 4 
// writeLabel Math.divide 
(Math.divide)
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push argument 1 
@ARG
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// equal 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187912
D;JEQ
@SP
A=M
M=0
(SKIP.TO.-504187912)
@SP
M=M+1
// writeIf IF_TRUE0 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE0
D;JNE
// writeGoto IF_FALSE0 
@IF_FALSE0
0;JEQ
// writeLabel IF_TRUE0 
(IF_TRUE0)
// push constant 3 
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Sys.error 1 
@Sys.error.return-address.32813
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Sys.error 
@Sys.error
0;JEQ
// writeLabel Sys.error.return-address.32813 
(Sys.error.return-address.32813)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// writeLabel IF_FALSE0 
(IF_FALSE0)
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// less than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187911
D;JLT
@SP
A=M
M=0
(SKIP.TO.-504187911)
@SP
M=M+1
// push argument 1 
@ARG
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// greater than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187910
D;JGT
@SP
A=M
M=0
(SKIP.TO.-504187910)
@SP
M=M+1
// and 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D&M
@SP
M=M+1
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// greater than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187908
D;JGT
@SP
A=M
M=0
(SKIP.TO.-504187908)
@SP
M=M+1
// push argument 1 
@ARG
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// less than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187907
D;JLT
@SP
A=M
M=0
(SKIP.TO.-504187907)
@SP
M=M+1
// and 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D&M
@SP
M=M+1
// or 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D|M
@SP
M=M+1
// pop local 2 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
A=A+1
M=D
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push static 1 
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push argument 1 
@ARG
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeCall Math.abs 1 
@Math.abs.return-address.32814
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Math.abs 
@Math.abs
0;JEQ
// writeLabel Math.abs.return-address.32814 
(Math.abs.return-address.32814)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push temp 0 
@R5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0 
@SP
M=M-1
@SP
A=M
D=M
@THAT
A=M
M=D
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeCall Math.abs 1 
@Math.abs.return-address.32815
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Math.abs 
@Math.abs
0;JEQ
// writeLabel Math.abs.return-address.32815 
(Math.abs.return-address.32815)
// pop argument 0 
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
// writeLabel WHILE_EXP0 
(WHILE_EXP0)
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 15 
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// less than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187903
D;JLT
@SP
A=M
M=0
(SKIP.TO.-504187903)
@SP
M=M+1
// push local 3 
@LCL
A=M
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// not 
@SP
M=M-1
@SP
A=M
D=M
M=!D
@SP
M=M+1
// and 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D&M
@SP
M=M+1
// not 
@SP
M=M-1
@SP
A=M
D=M
M=!D
@SP
M=M+1
// writeIf WHILE_END0 
@SP
M=M-1
@SP
A=M
D=M
@WHILE_END0
D;JNE
// push constant 32767 
@32767
D=A
@SP
A=M
M=D
@SP
M=M+1
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push static 1 
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push that 0 
@THAT
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=M-D
@SP
M=M+1
// sub 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=M-D
@SP
M=M+1
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push static 1 
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push that 0 
@THAT
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=M-D
@SP
M=M+1
// less than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187894
D;JLT
@SP
A=M
M=0
(SKIP.TO.-504187894)
@SP
M=M+1
// pop local 3 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
A=A+1
A=A+1
M=D
// push local 3 
@LCL
A=M
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// not 
@SP
M=M-1
@SP
A=M
D=M
M=!D
@SP
M=M+1
// writeIf IF_TRUE1 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE1
D;JNE
// writeGoto IF_FALSE1 
@IF_FALSE1
0;JEQ
// writeLabel IF_TRUE1 
(IF_TRUE1)
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push static 1 
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push static 1 
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push that 0 
@THAT
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push static 1 
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push that 0 
@THAT
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push temp 0 
@R5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0 
@SP
M=M-1
@SP
A=M
D=M
@THAT
A=M
M=D
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push static 1 
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push that 0 
@THAT
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=M-D
@SP
M=M+1
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=M-D
@SP
M=M+1
// greater than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187883
D;JGT
@SP
A=M
M=0
(SKIP.TO.-504187883)
@SP
M=M+1
// pop local 3 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
A=A+1
A=A+1
M=D
// push local 3 
@LCL
A=M
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// not 
@SP
M=M-1
@SP
A=M
D=M
M=!D
@SP
M=M+1
// writeIf IF_TRUE2 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE2
D;JNE
// writeGoto IF_FALSE2 
@IF_FALSE2
0;JEQ
// writeLabel IF_TRUE2 
(IF_TRUE2)
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop local 0 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
M=D
// writeLabel IF_FALSE2 
(IF_FALSE2)
// writeLabel IF_FALSE1 
(IF_FALSE1)
// writeGoto WHILE_EXP0 
@WHILE_EXP0
0;JEQ
// writeLabel WHILE_END0 
(WHILE_END0)
// writeLabel WHILE_EXP1 
(WHILE_EXP1)
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// neg 
@SP
M=M-1
@SP
A=M
D=M
M=-M
@SP
M=M+1
// greater than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187879
D;JGT
@SP
A=M
M=0
(SKIP.TO.-504187879)
@SP
M=M+1
// not 
@SP
M=M-1
@SP
A=M
D=M
M=!D
@SP
M=M+1
// writeIf WHILE_END1 
@SP
M=M-1
@SP
A=M
D=M
@WHILE_END1
D;JNE
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push static 1 
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push that 0 
@THAT
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=M-D
@SP
M=M+1
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=M-D
@SP
M=M+1
// greater than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187874
D;JGT
@SP
A=M
M=0
(SKIP.TO.-504187874)
@SP
M=M+1
// not 
@SP
M=M-1
@SP
A=M
D=M
M=!D
@SP
M=M+1
// writeIf IF_TRUE3 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE3
D;JNE
// writeGoto IF_FALSE3 
@IF_FALSE3
0;JEQ
// writeLabel IF_TRUE3 
(IF_TRUE3)
// push local 1 
@LCL
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push static 0 
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push that 0 
@THAT
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop local 1 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
M=D
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push static 1 
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push that 0 
@THAT
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=M-D
@SP
M=M+1
// pop argument 0 
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
// writeLabel IF_FALSE3 
(IF_FALSE3)
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=M-D
@SP
M=M+1
// pop local 0 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
M=D
// writeGoto WHILE_EXP1 
@WHILE_EXP1
0;JEQ
// writeLabel WHILE_END1 
(WHILE_END1)
// push local 2 
@LCL
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeIf IF_TRUE4 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE4
D;JNE
// writeGoto IF_FALSE4 
@IF_FALSE4
0;JEQ
// writeLabel IF_TRUE4 
(IF_TRUE4)
// push local 1 
@LCL
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// neg 
@SP
M=M-1
@SP
A=M
D=M
M=-M
@SP
M=M+1
// pop local 1 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
M=D
// writeLabel IF_FALSE4 
(IF_FALSE4)
// push local 1 
@LCL
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeReturn 
@LCL
D=M
@FRAME
M=D
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JEQ
// writeFunction Math.sqrt 4 
// writeLabel Math.sqrt 
(Math.sqrt)
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// less than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187866
D;JLT
@SP
A=M
M=0
(SKIP.TO.-504187866)
@SP
M=M+1
// writeIf IF_TRUE0 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE0
D;JNE
// writeGoto IF_FALSE0 
@IF_FALSE0
0;JEQ
// writeLabel IF_TRUE0 
(IF_TRUE0)
// push constant 4 
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Sys.error 1 
@Sys.error.return-address.32816
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Sys.error 
@Sys.error
0;JEQ
// writeLabel Sys.error.return-address.32816 
(Sys.error.return-address.32816)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// writeLabel IF_FALSE0 
(IF_FALSE0)
// push constant 7 
@7
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop local 0 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
M=D
// writeLabel WHILE_EXP0 
(WHILE_EXP0)
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// neg 
@SP
M=M-1
@SP
A=M
D=M
M=-M
@SP
M=M+1
// greater than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187864
D;JGT
@SP
A=M
M=0
(SKIP.TO.-504187864)
@SP
M=M+1
// not 
@SP
M=M-1
@SP
A=M
D=M
M=!D
@SP
M=M+1
// writeIf WHILE_END0 
@SP
M=M-1
@SP
A=M
D=M
@WHILE_END0
D;JNE
// push local 3 
@LCL
A=M
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push static 0 
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push that 0 
@THAT
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop local 1 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
M=D
// push local 1 
@LCL
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 1 
@LCL
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeCall Math.multiply 2 
@Math.multiply.return-address.32817
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Math.multiply 
@Math.multiply
0;JEQ
// writeLabel Math.multiply.return-address.32817 
(Math.multiply.return-address.32817)
// pop local 2 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
A=A+1
M=D
// push local 2 
@LCL
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// greater than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187860
D;JGT
@SP
A=M
M=0
(SKIP.TO.-504187860)
@SP
M=M+1
// not 
@SP
M=M-1
@SP
A=M
D=M
M=!D
@SP
M=M+1
// push local 2 
@LCL
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// less than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187858
D;JLT
@SP
A=M
M=0
(SKIP.TO.-504187858)
@SP
M=M+1
// not 
@SP
M=M-1
@SP
A=M
D=M
M=!D
@SP
M=M+1
// and 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D&M
@SP
M=M+1
// writeIf IF_TRUE1 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE1
D;JNE
// writeGoto IF_FALSE1 
@IF_FALSE1
0;JEQ
// writeLabel IF_TRUE1 
(IF_TRUE1)
// push local 1 
@LCL
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop local 3 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
A=A+1
A=A+1
M=D
// writeLabel IF_FALSE1 
(IF_FALSE1)
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=M-D
@SP
M=M+1
// pop local 0 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
M=D
// writeGoto WHILE_EXP0 
@WHILE_EXP0
0;JEQ
// writeLabel WHILE_END0 
(WHILE_END0)
// push local 3 
@LCL
A=M
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeReturn 
@LCL
D=M
@FRAME
M=D
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JEQ
// writeFunction Math.max 0 
// writeLabel Math.max 
(Math.max)
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push argument 1 
@ARG
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// greater than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187854
D;JGT
@SP
A=M
M=0
(SKIP.TO.-504187854)
@SP
M=M+1
// writeIf IF_TRUE0 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE0
D;JNE
// writeGoto IF_FALSE0 
@IF_FALSE0
0;JEQ
// writeLabel IF_TRUE0 
(IF_TRUE0)
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop argument 1 
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
A=A+1
M=D
// writeLabel IF_FALSE0 
(IF_FALSE0)
// push argument 1 
@ARG
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeReturn 
@LCL
D=M
@FRAME
M=D
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JEQ
// writeFunction Math.min 0 
// writeLabel Math.min 
(Math.min)
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push argument 1 
@ARG
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// less than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187853
D;JLT
@SP
A=M
M=0
(SKIP.TO.-504187853)
@SP
M=M+1
// writeIf IF_TRUE0 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE0
D;JNE
// writeGoto IF_FALSE0 
@IF_FALSE0
0;JEQ
// writeLabel IF_TRUE0 
(IF_TRUE0)
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop argument 1 
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
A=A+1
M=D
// writeLabel IF_FALSE0 
(IF_FALSE0)
// push argument 1 
@ARG
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeReturn 
@LCL
D=M
@FRAME
M=D
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JEQ
// writeFunction SquareGame.new 0 
// writeLabel SquareGame.new 
(SquareGame.new)
// push constant 2 
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Memory.alloc 1 
@Memory.alloc.return-address.32818
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Memory.alloc 
@Memory.alloc
0;JEQ
// writeLabel Memory.alloc.return-address.32818 
(Memory.alloc.return-address.32818)
// pop pointer 0 
@SP
M=M-1
@SP
A=M
D=M
@THIS
M=D
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 30 
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Square.new 3 
@Square.new.return-address.32819
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@8
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Square.new 
@Square.new
0;JEQ
// writeLabel Square.new.return-address.32819 
(Square.new.return-address.32819)
// pop this 0 
@SP
M=M-1
@SP
A=M
D=M
@THIS
A=M
M=D
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop this 1 
@SP
M=M-1
@SP
A=M
D=M
@THIS
A=M
A=A+1
M=D
// push pointer 0 
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeReturn 
@LCL
D=M
@FRAME
M=D
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JEQ
// writeFunction SquareGame.dispose 0 
// writeLabel SquareGame.dispose 
(SquareGame.dispose)
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop pointer 0 
@SP
M=M-1
@SP
A=M
D=M
@THIS
M=D
// push this 0 
@THIS
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeCall Square.dispose 1 
@Square.dispose.return-address.32820
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Square.dispose 
@Square.dispose
0;JEQ
// writeLabel Square.dispose.return-address.32820 
(Square.dispose.return-address.32820)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push pointer 0 
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeCall Memory.deAlloc 1 
@Memory.deAlloc.return-address.32821
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Memory.deAlloc 
@Memory.deAlloc
0;JEQ
// writeLabel Memory.deAlloc.return-address.32821 
(Memory.deAlloc.return-address.32821)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeReturn 
@LCL
D=M
@FRAME
M=D
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JEQ
// writeFunction SquareGame.moveSquare 0 
// writeLabel SquareGame.moveSquare 
(SquareGame.moveSquare)
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop pointer 0 
@SP
M=M-1
@SP
A=M
D=M
@THIS
M=D
// push this 1 
@THIS
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// equal 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187852
D;JEQ
@SP
A=M
M=0
(SKIP.TO.-504187852)
@SP
M=M+1
// writeIf IF_TRUE0 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE0
D;JNE
// writeGoto IF_FALSE0 
@IF_FALSE0
0;JEQ
// writeLabel IF_TRUE0 
(IF_TRUE0)
// push this 0 
@THIS
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeCall Square.moveUp 1 
@Square.moveUp.return-address.32822
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Square.moveUp 
@Square.moveUp
0;JEQ
// writeLabel Square.moveUp.return-address.32822 
(Square.moveUp.return-address.32822)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// writeLabel IF_FALSE0 
(IF_FALSE0)
// push this 1 
@THIS
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2 
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// equal 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187851
D;JEQ
@SP
A=M
M=0
(SKIP.TO.-504187851)
@SP
M=M+1
// writeIf IF_TRUE1 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE1
D;JNE
// writeGoto IF_FALSE1 
@IF_FALSE1
0;JEQ
// writeLabel IF_TRUE1 
(IF_TRUE1)
// push this 0 
@THIS
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeCall Square.moveDown 1 
@Square.moveDown.return-address.32823
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Square.moveDown 
@Square.moveDown
0;JEQ
// writeLabel Square.moveDown.return-address.32823 
(Square.moveDown.return-address.32823)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// writeLabel IF_FALSE1 
(IF_FALSE1)
// push this 1 
@THIS
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 3 
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// equal 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187850
D;JEQ
@SP
A=M
M=0
(SKIP.TO.-504187850)
@SP
M=M+1
// writeIf IF_TRUE2 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE2
D;JNE
// writeGoto IF_FALSE2 
@IF_FALSE2
0;JEQ
// writeLabel IF_TRUE2 
(IF_TRUE2)
// push this 0 
@THIS
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeCall Square.moveLeft 1 
@Square.moveLeft.return-address.32824
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Square.moveLeft 
@Square.moveLeft
0;JEQ
// writeLabel Square.moveLeft.return-address.32824 
(Square.moveLeft.return-address.32824)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// writeLabel IF_FALSE2 
(IF_FALSE2)
// push this 1 
@THIS
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 4 
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// equal 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187849
D;JEQ
@SP
A=M
M=0
(SKIP.TO.-504187849)
@SP
M=M+1
// writeIf IF_TRUE3 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE3
D;JNE
// writeGoto IF_FALSE3 
@IF_FALSE3
0;JEQ
// writeLabel IF_TRUE3 
(IF_TRUE3)
// push this 0 
@THIS
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeCall Square.moveRight 1 
@Square.moveRight.return-address.32825
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Square.moveRight 
@Square.moveRight
0;JEQ
// writeLabel Square.moveRight.return-address.32825 
(Square.moveRight.return-address.32825)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// writeLabel IF_FALSE3 
(IF_FALSE3)
// push constant 5 
@5
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Sys.wait 1 
@Sys.wait.return-address.32826
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Sys.wait 
@Sys.wait
0;JEQ
// writeLabel Sys.wait.return-address.32826 
(Sys.wait.return-address.32826)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeReturn 
@LCL
D=M
@FRAME
M=D
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JEQ
// writeFunction SquareGame.run 2 
// writeLabel SquareGame.run 
(SquareGame.run)
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop pointer 0 
@SP
M=M-1
@SP
A=M
D=M
@THIS
M=D
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop local 1 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
M=D
// writeLabel WHILE_EXP0 
(WHILE_EXP0)
// push local 1 
@LCL
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// not 
@SP
M=M-1
@SP
A=M
D=M
M=!D
@SP
M=M+1
// not 
@SP
M=M-1
@SP
A=M
D=M
M=!D
@SP
M=M+1
// writeIf WHILE_END0 
@SP
M=M-1
@SP
A=M
D=M
@WHILE_END0
D;JNE
// writeLabel WHILE_EXP1 
(WHILE_EXP1)
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// equal 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187846
D;JEQ
@SP
A=M
M=0
(SKIP.TO.-504187846)
@SP
M=M+1
// not 
@SP
M=M-1
@SP
A=M
D=M
M=!D
@SP
M=M+1
// writeIf WHILE_END1 
@SP
M=M-1
@SP
A=M
D=M
@WHILE_END1
D;JNE
// writeCall Keyboard.keyPressed 0 
@Keyboard.keyPressed.return-address.32827
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Keyboard.keyPressed 
@Keyboard.keyPressed
0;JEQ
// writeLabel Keyboard.keyPressed.return-address.32827 
(Keyboard.keyPressed.return-address.32827)
// pop local 0 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
M=D
// push pointer 0 
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeCall SquareGame.moveSquare 1 
@SquareGame.moveSquare.return-address.32828
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto SquareGame.moveSquare 
@SquareGame.moveSquare
0;JEQ
// writeLabel SquareGame.moveSquare.return-address.32828 
(SquareGame.moveSquare.return-address.32828)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// writeGoto WHILE_EXP1 
@WHILE_EXP1
0;JEQ
// writeLabel WHILE_END1 
(WHILE_END1)
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 81 
@81
D=A
@SP
A=M
M=D
@SP
M=M+1
// equal 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187844
D;JEQ
@SP
A=M
M=0
(SKIP.TO.-504187844)
@SP
M=M+1
// writeIf IF_TRUE0 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE0
D;JNE
// writeGoto IF_FALSE0 
@IF_FALSE0
0;JEQ
// writeLabel IF_TRUE0 
(IF_TRUE0)
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not 
@SP
M=M-1
@SP
A=M
D=M
M=!D
@SP
M=M+1
// pop local 1 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
M=D
// writeLabel IF_FALSE0 
(IF_FALSE0)
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 90 
@90
D=A
@SP
A=M
M=D
@SP
M=M+1
// equal 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187842
D;JEQ
@SP
A=M
M=0
(SKIP.TO.-504187842)
@SP
M=M+1
// writeIf IF_TRUE1 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE1
D;JNE
// writeGoto IF_FALSE1 
@IF_FALSE1
0;JEQ
// writeLabel IF_TRUE1 
(IF_TRUE1)
// push this 0 
@THIS
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeCall Square.decSize 1 
@Square.decSize.return-address.32829
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Square.decSize 
@Square.decSize
0;JEQ
// writeLabel Square.decSize.return-address.32829 
(Square.decSize.return-address.32829)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// writeLabel IF_FALSE1 
(IF_FALSE1)
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 88 
@88
D=A
@SP
A=M
M=D
@SP
M=M+1
// equal 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187841
D;JEQ
@SP
A=M
M=0
(SKIP.TO.-504187841)
@SP
M=M+1
// writeIf IF_TRUE2 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE2
D;JNE
// writeGoto IF_FALSE2 
@IF_FALSE2
0;JEQ
// writeLabel IF_TRUE2 
(IF_TRUE2)
// push this 0 
@THIS
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeCall Square.incSize 1 
@Square.incSize.return-address.32830
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Square.incSize 
@Square.incSize
0;JEQ
// writeLabel Square.incSize.return-address.32830 
(Square.incSize.return-address.32830)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// writeLabel IF_FALSE2 
(IF_FALSE2)
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 131 
@131
D=A
@SP
A=M
M=D
@SP
M=M+1
// equal 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187840
D;JEQ
@SP
A=M
M=0
(SKIP.TO.-504187840)
@SP
M=M+1
// writeIf IF_TRUE3 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE3
D;JNE
// writeGoto IF_FALSE3 
@IF_FALSE3
0;JEQ
// writeLabel IF_TRUE3 
(IF_TRUE3)
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop this 1 
@SP
M=M-1
@SP
A=M
D=M
@THIS
A=M
A=A+1
M=D
// writeLabel IF_FALSE3 
(IF_FALSE3)
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 133 
@133
D=A
@SP
A=M
M=D
@SP
M=M+1
// equal 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187839
D;JEQ
@SP
A=M
M=0
(SKIP.TO.-504187839)
@SP
M=M+1
// writeIf IF_TRUE4 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE4
D;JNE
// writeGoto IF_FALSE4 
@IF_FALSE4
0;JEQ
// writeLabel IF_TRUE4 
(IF_TRUE4)
// push constant 2 
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop this 1 
@SP
M=M-1
@SP
A=M
D=M
@THIS
A=M
A=A+1
M=D
// writeLabel IF_FALSE4 
(IF_FALSE4)
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 130 
@130
D=A
@SP
A=M
M=D
@SP
M=M+1
// equal 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187838
D;JEQ
@SP
A=M
M=0
(SKIP.TO.-504187838)
@SP
M=M+1
// writeIf IF_TRUE5 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE5
D;JNE
// writeGoto IF_FALSE5 
@IF_FALSE5
0;JEQ
// writeLabel IF_TRUE5 
(IF_TRUE5)
// push constant 3 
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop this 1 
@SP
M=M-1
@SP
A=M
D=M
@THIS
A=M
A=A+1
M=D
// writeLabel IF_FALSE5 
(IF_FALSE5)
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 132 
@132
D=A
@SP
A=M
M=D
@SP
M=M+1
// equal 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187837
D;JEQ
@SP
A=M
M=0
(SKIP.TO.-504187837)
@SP
M=M+1
// writeIf IF_TRUE6 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE6
D;JNE
// writeGoto IF_FALSE6 
@IF_FALSE6
0;JEQ
// writeLabel IF_TRUE6 
(IF_TRUE6)
// push constant 4 
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop this 1 
@SP
M=M-1
@SP
A=M
D=M
@THIS
A=M
A=A+1
M=D
// writeLabel IF_FALSE6 
(IF_FALSE6)
// writeLabel WHILE_EXP2 
(WHILE_EXP2)
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// equal 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187836
D;JEQ
@SP
A=M
M=0
(SKIP.TO.-504187836)
@SP
M=M+1
// not 
@SP
M=M-1
@SP
A=M
D=M
M=!D
@SP
M=M+1
// not 
@SP
M=M-1
@SP
A=M
D=M
M=!D
@SP
M=M+1
// writeIf WHILE_END2 
@SP
M=M-1
@SP
A=M
D=M
@WHILE_END2
D;JNE
// writeCall Keyboard.keyPressed 0 
@Keyboard.keyPressed.return-address.32831
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Keyboard.keyPressed 
@Keyboard.keyPressed
0;JEQ
// writeLabel Keyboard.keyPressed.return-address.32831 
(Keyboard.keyPressed.return-address.32831)
// pop local 0 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
M=D
// push pointer 0 
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeCall SquareGame.moveSquare 1 
@SquareGame.moveSquare.return-address.32832
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto SquareGame.moveSquare 
@SquareGame.moveSquare
0;JEQ
// writeLabel SquareGame.moveSquare.return-address.32832 
(SquareGame.moveSquare.return-address.32832)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// writeGoto WHILE_EXP2 
@WHILE_EXP2
0;JEQ
// writeLabel WHILE_END2 
(WHILE_END2)
// writeGoto WHILE_EXP0 
@WHILE_EXP0
0;JEQ
// writeLabel WHILE_END0 
(WHILE_END0)
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeReturn 
@LCL
D=M
@FRAME
M=D
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JEQ
// writeFunction Array.new 0 
// writeLabel Array.new 
(Array.new)
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// greater than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187833
D;JGT
@SP
A=M
M=0
(SKIP.TO.-504187833)
@SP
M=M+1
// not 
@SP
M=M-1
@SP
A=M
D=M
M=!D
@SP
M=M+1
// writeIf IF_TRUE0 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE0
D;JNE
// writeGoto IF_FALSE0 
@IF_FALSE0
0;JEQ
// writeLabel IF_TRUE0 
(IF_TRUE0)
// push constant 2 
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Sys.error 1 
@Sys.error.return-address.32833
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Sys.error 
@Sys.error
0;JEQ
// writeLabel Sys.error.return-address.32833 
(Sys.error.return-address.32833)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// writeLabel IF_FALSE0 
(IF_FALSE0)
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeCall Memory.alloc 1 
@Memory.alloc.return-address.32834
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Memory.alloc 
@Memory.alloc
0;JEQ
// writeLabel Memory.alloc.return-address.32834 
(Memory.alloc.return-address.32834)
// writeReturn 
@LCL
D=M
@FRAME
M=D
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JEQ
// writeFunction Array.dispose 0 
// writeLabel Array.dispose 
(Array.dispose)
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop pointer 0 
@SP
M=M-1
@SP
A=M
D=M
@THIS
M=D
// push pointer 0 
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeCall Memory.deAlloc 1 
@Memory.deAlloc.return-address.32835
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Memory.deAlloc 
@Memory.deAlloc
0;JEQ
// writeLabel Memory.deAlloc.return-address.32835 
(Memory.deAlloc.return-address.32835)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeReturn 
@LCL
D=M
@FRAME
M=D
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JEQ
// writeFunction Main.main 1 
// writeLabel Main.main 
(Main.main)
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall SquareGame.new 0 
@SquareGame.new.return-address.32836
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto SquareGame.new 
@SquareGame.new
0;JEQ
// writeLabel SquareGame.new.return-address.32836 
(SquareGame.new.return-address.32836)
// pop local 0 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
M=D
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeCall SquareGame.run 1 
@SquareGame.run.return-address.32837
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto SquareGame.run 
@SquareGame.run
0;JEQ
// writeLabel SquareGame.run.return-address.32837 
(SquareGame.run.return-address.32837)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeCall SquareGame.dispose 1 
@SquareGame.dispose.return-address.32838
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto SquareGame.dispose 
@SquareGame.dispose
0;JEQ
// writeLabel SquareGame.dispose.return-address.32838 
(SquareGame.dispose.return-address.32838)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeReturn 
@LCL
D=M
@FRAME
M=D
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JEQ
// writeFunction Keyboard.init 0 
// writeLabel Keyboard.init 
(Keyboard.init)
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeReturn 
@LCL
D=M
@FRAME
M=D
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JEQ
// writeFunction Keyboard.keyPressed 0 
// writeLabel Keyboard.keyPressed 
(Keyboard.keyPressed)
// push constant 24576 
@24576
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Memory.peek 1 
@Memory.peek.return-address.32839
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Memory.peek 
@Memory.peek
0;JEQ
// writeLabel Memory.peek.return-address.32839 
(Memory.peek.return-address.32839)
// writeReturn 
@LCL
D=M
@FRAME
M=D
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JEQ
// writeFunction Keyboard.readChar 2 
// writeLabel Keyboard.readChar 
(Keyboard.readChar)
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.printChar 1 
@Output.printChar.return-address.32840
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.printChar 
@Output.printChar
0;JEQ
// writeLabel Output.printChar.return-address.32840 
(Output.printChar.return-address.32840)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// writeLabel WHILE_EXP0 
(WHILE_EXP0)
// push local 1 
@LCL
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// equal 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187831
D;JEQ
@SP
A=M
M=0
(SKIP.TO.-504187831)
@SP
M=M+1
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// greater than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187830
D;JGT
@SP
A=M
M=0
(SKIP.TO.-504187830)
@SP
M=M+1
// or 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D|M
@SP
M=M+1
// not 
@SP
M=M-1
@SP
A=M
D=M
M=!D
@SP
M=M+1
// writeIf WHILE_END0 
@SP
M=M-1
@SP
A=M
D=M
@WHILE_END0
D;JNE
// writeCall Keyboard.keyPressed 0 
@Keyboard.keyPressed.return-address.32841
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Keyboard.keyPressed 
@Keyboard.keyPressed
0;JEQ
// writeLabel Keyboard.keyPressed.return-address.32841 
(Keyboard.keyPressed.return-address.32841)
// pop local 0 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
M=D
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// greater than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187827
D;JGT
@SP
A=M
M=0
(SKIP.TO.-504187827)
@SP
M=M+1
// writeIf IF_TRUE0 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE0
D;JNE
// writeGoto IF_FALSE0 
@IF_FALSE0
0;JEQ
// writeLabel IF_TRUE0 
(IF_TRUE0)
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop local 1 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
M=D
// writeLabel IF_FALSE0 
(IF_FALSE0)
// writeGoto WHILE_EXP0 
@WHILE_EXP0
0;JEQ
// writeLabel WHILE_END0 
(WHILE_END0)
// writeCall String.backSpace 0 
@String.backSpace.return-address.32842
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto String.backSpace 
@String.backSpace
0;JEQ
// writeLabel String.backSpace.return-address.32842 
(String.backSpace.return-address.32842)
// writeCall Output.printChar 1 
@Output.printChar.return-address.32843
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.printChar 
@Output.printChar
0;JEQ
// writeLabel Output.printChar.return-address.32843 
(Output.printChar.return-address.32843)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push local 1 
@LCL
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.printChar 1 
@Output.printChar.return-address.32844
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.printChar 
@Output.printChar
0;JEQ
// writeLabel Output.printChar.return-address.32844 
(Output.printChar.return-address.32844)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push local 1 
@LCL
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeReturn 
@LCL
D=M
@FRAME
M=D
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JEQ
// writeFunction Keyboard.readLine 5 
// writeLabel Keyboard.readLine 
(Keyboard.readLine)
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 80 
@80
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall String.new 1 
@String.new.return-address.32845
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto String.new 
@String.new
0;JEQ
// writeLabel String.new.return-address.32845 
(String.new.return-address.32845)
// pop local 3 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
A=A+1
A=A+1
M=D
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.printString 1 
@Output.printString.return-address.32846
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.printString 
@Output.printString
0;JEQ
// writeLabel Output.printString.return-address.32846 
(Output.printString.return-address.32846)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// writeCall String.newLine 0 
@String.newLine.return-address.32847
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto String.newLine 
@String.newLine
0;JEQ
// writeLabel String.newLine.return-address.32847 
(String.newLine.return-address.32847)
// pop local 1 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
M=D
// writeCall String.backSpace 0 
@String.backSpace.return-address.32848
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto String.backSpace 
@String.backSpace
0;JEQ
// writeLabel String.backSpace.return-address.32848 
(String.backSpace.return-address.32848)
// pop local 2 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
A=A+1
M=D
// writeLabel WHILE_EXP0 
(WHILE_EXP0)
// push local 4 
@LCL
A=M
A=A+1
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// not 
@SP
M=M-1
@SP
A=M
D=M
M=!D
@SP
M=M+1
// not 
@SP
M=M-1
@SP
A=M
D=M
M=!D
@SP
M=M+1
// writeIf WHILE_END0 
@SP
M=M-1
@SP
A=M
D=M
@WHILE_END0
D;JNE
// writeCall Keyboard.readChar 0 
@Keyboard.readChar.return-address.32849
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Keyboard.readChar 
@Keyboard.readChar
0;JEQ
// writeLabel Keyboard.readChar.return-address.32849 
(Keyboard.readChar.return-address.32849)
// pop local 0 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
M=D
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 1 
@LCL
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// equal 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187824
D;JEQ
@SP
A=M
M=0
(SKIP.TO.-504187824)
@SP
M=M+1
// pop local 4 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
A=A+1
A=A+1
A=A+1
M=D
// push local 4 
@LCL
A=M
A=A+1
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// not 
@SP
M=M-1
@SP
A=M
D=M
M=!D
@SP
M=M+1
// writeIf IF_TRUE0 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE0
D;JNE
// writeGoto IF_FALSE0 
@IF_FALSE0
0;JEQ
// writeLabel IF_TRUE0 
(IF_TRUE0)
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 2 
@LCL
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// equal 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187822
D;JEQ
@SP
A=M
M=0
(SKIP.TO.-504187822)
@SP
M=M+1
// writeIf IF_TRUE1 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE1
D;JNE
// writeGoto IF_FALSE1 
@IF_FALSE1
0;JEQ
// writeLabel IF_TRUE1 
(IF_TRUE1)
// push local 3 
@LCL
A=M
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeCall String.eraseLastChar 1 
@String.eraseLastChar.return-address.32850
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto String.eraseLastChar 
@String.eraseLastChar
0;JEQ
// writeLabel String.eraseLastChar.return-address.32850 
(String.eraseLastChar.return-address.32850)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// writeGoto IF_END1 
@IF_END1
0;JEQ
// writeLabel IF_FALSE1 
(IF_FALSE1)
// push local 3 
@LCL
A=M
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeCall String.appendChar 2 
@String.appendChar.return-address.32851
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto String.appendChar 
@String.appendChar
0;JEQ
// writeLabel String.appendChar.return-address.32851 
(String.appendChar.return-address.32851)
// pop local 3 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
A=A+1
A=A+1
M=D
// writeLabel IF_END1 
(IF_END1)
// writeLabel IF_FALSE0 
(IF_FALSE0)
// writeGoto WHILE_EXP0 
@WHILE_EXP0
0;JEQ
// writeLabel WHILE_END0 
(WHILE_END0)
// push local 3 
@LCL
A=M
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeReturn 
@LCL
D=M
@FRAME
M=D
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JEQ
// writeFunction Keyboard.readInt 2 
// writeLabel Keyboard.readInt 
(Keyboard.readInt)
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeCall Keyboard.readLine 1 
@Keyboard.readLine.return-address.32852
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Keyboard.readLine 
@Keyboard.readLine
0;JEQ
// writeLabel Keyboard.readLine.return-address.32852 
(Keyboard.readLine.return-address.32852)
// pop local 0 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
M=D
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeCall String.intValue 1 
@String.intValue.return-address.32853
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto String.intValue 
@String.intValue
0;JEQ
// writeLabel String.intValue.return-address.32853 
(String.intValue.return-address.32853)
// pop local 1 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
M=D
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeCall String.dispose 1 
@String.dispose.return-address.32854
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto String.dispose 
@String.dispose
0;JEQ
// writeLabel String.dispose.return-address.32854 
(String.dispose.return-address.32854)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push local 1 
@LCL
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeReturn 
@LCL
D=M
@FRAME
M=D
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JEQ
// writeFunction Sys.init 0 
// writeLabel Sys.init 
(Sys.init)
// writeCall Memory.init 0 
@Memory.init.return-address.32855
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Memory.init 
@Memory.init
0;JEQ
// writeLabel Memory.init.return-address.32855 
(Memory.init.return-address.32855)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// writeCall Math.init 0 
@Math.init.return-address.32856
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Math.init 
@Math.init
0;JEQ
// writeLabel Math.init.return-address.32856 
(Math.init.return-address.32856)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// writeCall Screen.init 0 
@Screen.init.return-address.32857
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Screen.init 
@Screen.init
0;JEQ
// writeLabel Screen.init.return-address.32857 
(Screen.init.return-address.32857)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// writeCall Output.init 0 
@Output.init.return-address.32858
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.init 
@Output.init
0;JEQ
// writeLabel Output.init.return-address.32858 
(Output.init.return-address.32858)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// writeCall Keyboard.init 0 
@Keyboard.init.return-address.32859
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Keyboard.init 
@Keyboard.init
0;JEQ
// writeLabel Keyboard.init.return-address.32859 
(Keyboard.init.return-address.32859)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// writeCall Main.main 0 
@Main.main.return-address.32860
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Main.main 
@Main.main
0;JEQ
// writeLabel Main.main.return-address.32860 
(Main.main.return-address.32860)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// writeCall Sys.halt 0 
@Sys.halt.return-address.32861
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Sys.halt 
@Sys.halt
0;JEQ
// writeLabel Sys.halt.return-address.32861 
(Sys.halt.return-address.32861)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeReturn 
@LCL
D=M
@FRAME
M=D
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JEQ
// writeFunction Sys.halt 0 
// writeLabel Sys.halt 
(Sys.halt)
// writeLabel WHILE_EXP0 
(WHILE_EXP0)
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not 
@SP
M=M-1
@SP
A=M
D=M
M=!D
@SP
M=M+1
// not 
@SP
M=M-1
@SP
A=M
D=M
M=!D
@SP
M=M+1
// writeIf WHILE_END0 
@SP
M=M-1
@SP
A=M
D=M
@WHILE_END0
D;JNE
// writeGoto WHILE_EXP0 
@WHILE_EXP0
0;JEQ
// writeLabel WHILE_END0 
(WHILE_END0)
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeReturn 
@LCL
D=M
@FRAME
M=D
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JEQ
// writeFunction Sys.wait 1 
// writeLabel Sys.wait 
(Sys.wait)
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// less than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187819
D;JLT
@SP
A=M
M=0
(SKIP.TO.-504187819)
@SP
M=M+1
// writeIf IF_TRUE0 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE0
D;JNE
// writeGoto IF_FALSE0 
@IF_FALSE0
0;JEQ
// writeLabel IF_TRUE0 
(IF_TRUE0)
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Sys.error 1 
@Sys.error.return-address.32862
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Sys.error 
@Sys.error
0;JEQ
// writeLabel Sys.error.return-address.32862 
(Sys.error.return-address.32862)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// writeLabel IF_FALSE0 
(IF_FALSE0)
// writeLabel WHILE_EXP0 
(WHILE_EXP0)
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// greater than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187818
D;JGT
@SP
A=M
M=0
(SKIP.TO.-504187818)
@SP
M=M+1
// not 
@SP
M=M-1
@SP
A=M
D=M
M=!D
@SP
M=M+1
// writeIf WHILE_END0 
@SP
M=M-1
@SP
A=M
D=M
@WHILE_END0
D;JNE
// push constant 50 
@50
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop local 0 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
M=D
// writeLabel WHILE_EXP1 
(WHILE_EXP1)
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// greater than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187816
D;JGT
@SP
A=M
M=0
(SKIP.TO.-504187816)
@SP
M=M+1
// not 
@SP
M=M-1
@SP
A=M
D=M
M=!D
@SP
M=M+1
// writeIf WHILE_END1 
@SP
M=M-1
@SP
A=M
D=M
@WHILE_END1
D;JNE
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=M-D
@SP
M=M+1
// pop local 0 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
M=D
// writeGoto WHILE_EXP1 
@WHILE_EXP1
0;JEQ
// writeLabel WHILE_END1 
(WHILE_END1)
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=M-D
@SP
M=M+1
// pop argument 0 
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
// writeGoto WHILE_EXP0 
@WHILE_EXP0
0;JEQ
// writeLabel WHILE_END0 
(WHILE_END0)
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeReturn 
@LCL
D=M
@FRAME
M=D
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JEQ
// writeFunction Sys.error 0 
// writeLabel Sys.error 
(Sys.error)
// push constant 3 
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall String.new 1 
@String.new.return-address.32863
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto String.new 
@String.new
0;JEQ
// writeLabel String.new.return-address.32863 
(String.new.return-address.32863)
// push constant 69 
@69
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall String.appendChar 2 
@String.appendChar.return-address.32864
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto String.appendChar 
@String.appendChar
0;JEQ
// writeLabel String.appendChar.return-address.32864 
(String.appendChar.return-address.32864)
// push constant 82 
@82
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall String.appendChar 2 
@String.appendChar.return-address.32865
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto String.appendChar 
@String.appendChar
0;JEQ
// writeLabel String.appendChar.return-address.32865 
(String.appendChar.return-address.32865)
// push constant 82 
@82
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall String.appendChar 2 
@String.appendChar.return-address.32866
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto String.appendChar 
@String.appendChar
0;JEQ
// writeLabel String.appendChar.return-address.32866 
(String.appendChar.return-address.32866)
// writeCall Output.printString 1 
@Output.printString.return-address.32867
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.printString 
@Output.printString
0;JEQ
// writeLabel Output.printString.return-address.32867 
(Output.printString.return-address.32867)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.printInt 1 
@Output.printInt.return-address.32868
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.printInt 
@Output.printInt
0;JEQ
// writeLabel Output.printInt.return-address.32868 
(Output.printInt.return-address.32868)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// writeCall Sys.halt 0 
@Sys.halt.return-address.32869
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Sys.halt 
@Sys.halt
0;JEQ
// writeLabel Sys.halt.return-address.32869 
(Sys.halt.return-address.32869)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeReturn 
@LCL
D=M
@FRAME
M=D
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JEQ
// writeFunction Output.init 0 
// writeLabel Output.init 
(Output.init)
// push constant 16384 
@16384
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop static 4 
@SP
M=M-1
@SP
A=M
D=M
@Output.4
M=D
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not 
@SP
M=M-1
@SP
A=M
D=M
M=!D
@SP
M=M+1
// pop static 2 
@SP
M=M-1
@SP
A=M
D=M
@Output.2
M=D
// push constant 32 
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop static 1 
@SP
M=M-1
@SP
A=M
D=M
@Output.1
M=D
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop static 0 
@SP
M=M-1
@SP
A=M
D=M
@Output.0
M=D
// push constant 6 
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall String.new 1 
@String.new.return-address.32870
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto String.new 
@String.new
0;JEQ
// writeLabel String.new.return-address.32870 
(String.new.return-address.32870)
// pop static 3 
@SP
M=M-1
@SP
A=M
D=M
@Output.3
M=D
// writeCall Output.initMap 0 
@Output.initMap.return-address.32871
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.initMap 
@Output.initMap
0;JEQ
// writeLabel Output.initMap.return-address.32871 
(Output.initMap.return-address.32871)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// writeCall Output.createShiftedMap 0 
@Output.createShiftedMap.return-address.32872
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.createShiftedMap 
@Output.createShiftedMap
0;JEQ
// writeLabel Output.createShiftedMap.return-address.32872 
(Output.createShiftedMap.return-address.32872)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeReturn 
@LCL
D=M
@FRAME
M=D
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JEQ
// writeFunction Output.initMap 0 
// writeLabel Output.initMap 
(Output.initMap)
// push constant 127 
@127
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Array.new 1 
@Array.new.return-address.32873
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Array.new 
@Array.new
0;JEQ
// writeLabel Array.new.return-address.32873 
(Array.new.return-address.32873)
// pop static 5 
@SP
M=M-1
@SP
A=M
D=M
@Output.5
M=D
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 63 
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 63 
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 63 
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 63 
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 63 
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 63 
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 63 
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 63 
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 63 
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32874
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32874 
(Output.create.return-address.32874)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 32 
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32875
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32875 
(Output.create.return-address.32875)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 33 
@33
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 30 
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 30 
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 30 
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32876
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32876 
(Output.create.return-address.32876)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 34 
@34
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 54 
@54
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 54 
@54
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 20 
@20
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32877
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32877 
(Output.create.return-address.32877)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 35 
@35
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 18 
@18
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 18 
@18
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 63 
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 18 
@18
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 18 
@18
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 63 
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 18 
@18
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 18 
@18
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32878
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32878 
(Output.create.return-address.32878)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 36 
@36
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 30 
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 3 
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 30 
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 48 
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 30 
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32879
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32879 
(Output.create.return-address.32879)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 37 
@37
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 35 
@35
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 24 
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 6 
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 49 
@49
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32880
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32880 
(Output.create.return-address.32880)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 38 
@38
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 30 
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 30 
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 54 
@54
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 27 
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 27 
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 27 
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 54 
@54
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32881
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32881 
(Output.create.return-address.32881)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 39 
@39
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 6 
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32882
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32882 
(Output.create.return-address.32882)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 40 
@40
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 24 
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 6 
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 6 
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 6 
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 6 
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 6 
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 24 
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32883
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32883 
(Output.create.return-address.32883)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 41 
@41
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 6 
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 24 
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 24 
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 24 
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 24 
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 24 
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 6 
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32884
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32884 
(Output.create.return-address.32884)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 42 
@42
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 30 
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 63 
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 30 
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32885
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32885 
(Output.create.return-address.32885)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 43 
@43
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 63 
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32886
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32886 
(Output.create.return-address.32886)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 44 
@44
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 6 
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32887
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32887 
(Output.create.return-address.32887)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 45 
@45
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 63 
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32888
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32888 
(Output.create.return-address.32888)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 46 
@46
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32889
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32889 
(Output.create.return-address.32889)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 47 
@47
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 32 
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 48 
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 24 
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 6 
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 3 
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32890
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32890 
(Output.create.return-address.32890)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 48 
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 30 
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 30 
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32891
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32891 
(Output.create.return-address.32891)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 49 
@49
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 14 
@14
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 15 
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 63 
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32892
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32892 
(Output.create.return-address.32892)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 50 
@50
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 30 
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 48 
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 24 
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 6 
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 3 
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 63 
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32893
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32893 
(Output.create.return-address.32893)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 30 
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 48 
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 48 
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 28 
@28
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 48 
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 48 
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 30 
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32894
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32894 
(Output.create.return-address.32894)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 52 
@52
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 16 
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 24 
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 28 
@28
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 26 
@26
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 25 
@25
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 63 
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 24 
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 24 
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 60 
@60
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32895
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32895 
(Output.create.return-address.32895)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 53 
@53
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 63 
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 3 
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 3 
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 31 
@31
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 48 
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 48 
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 48 
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 30 
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32896
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32896 
(Output.create.return-address.32896)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 54 
@54
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 28 
@28
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 6 
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 3 
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 3 
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 31 
@31
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 30 
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32897
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32897 
(Output.create.return-address.32897)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 55 
@55
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 63 
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 49 
@49
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 48 
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 48 
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 24 
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32898
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32898 
(Output.create.return-address.32898)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 56 
@56
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 30 
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 30 
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 30 
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32899
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32899 
(Output.create.return-address.32899)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 57 
@57
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 30 
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 62 
@62
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 48 
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 48 
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 24 
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 14 
@14
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32900
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32900 
(Output.create.return-address.32900)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 58 
@58
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32901
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32901 
(Output.create.return-address.32901)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 59 
@59
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 6 
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32902
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32902 
(Output.create.return-address.32902)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 60 
@60
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 24 
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 6 
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 3 
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 6 
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 24 
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32903
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32903 
(Output.create.return-address.32903)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 61 
@61
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 63 
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 63 
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32904
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32904 
(Output.create.return-address.32904)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 62 
@62
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 3 
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 6 
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 24 
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 6 
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 3 
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32905
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32905 
(Output.create.return-address.32905)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 64 
@64
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 30 
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 59 
@59
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 59 
@59
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 59 
@59
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 27 
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 3 
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 30 
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32906
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32906 
(Output.create.return-address.32906)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 63 
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 30 
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 24 
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32907
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32907 
(Output.create.return-address.32907)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 65 
@65
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 30 
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 63 
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32908
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32908 
(Output.create.return-address.32908)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 66 
@66
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 31 
@31
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 31 
@31
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 31 
@31
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32909
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32909 
(Output.create.return-address.32909)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 67 
@67
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 28 
@28
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 54 
@54
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 35 
@35
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 3 
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 3 
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 3 
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 35 
@35
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 54 
@54
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 28 
@28
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32910
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32910 
(Output.create.return-address.32910)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 68 
@68
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 15 
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 27 
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 27 
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 15 
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32911
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32911 
(Output.create.return-address.32911)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 69 
@69
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 63 
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 35 
@35
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 11 
@11
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 15 
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 11 
@11
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 35 
@35
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 63 
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32912
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32912 
(Output.create.return-address.32912)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 70 
@70
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 63 
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 35 
@35
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 11 
@11
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 15 
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 11 
@11
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 3 
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 3 
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 3 
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32913
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32913 
(Output.create.return-address.32913)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 71 
@71
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 28 
@28
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 54 
@54
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 35 
@35
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 3 
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 59 
@59
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 54 
@54
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 44 
@44
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32914
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32914 
(Output.create.return-address.32914)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 72 
@72
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 63 
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32915
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32915 
(Output.create.return-address.32915)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 73 
@73
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 30 
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 30 
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32916
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32916 
(Output.create.return-address.32916)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 74 
@74
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 60 
@60
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 24 
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 24 
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 24 
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 24 
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 24 
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 27 
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 27 
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 14 
@14
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32917
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32917 
(Output.create.return-address.32917)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 75 
@75
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 27 
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 15 
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 27 
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32918
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32918 
(Output.create.return-address.32918)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 76 
@76
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 3 
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 3 
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 3 
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 3 
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 3 
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 3 
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 35 
@35
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 63 
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32919
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32919 
(Output.create.return-address.32919)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 77 
@77
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 33 
@33
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 63 
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 63 
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32920
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32920 
(Output.create.return-address.32920)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 78 
@78
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 55 
@55
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 55 
@55
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 63 
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 59 
@59
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 59 
@59
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32921
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32921 
(Output.create.return-address.32921)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 79 
@79
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 30 
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 30 
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32922
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32922 
(Output.create.return-address.32922)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 80 
@80
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 31 
@31
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 31 
@31
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 3 
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 3 
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 3 
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 3 
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32923
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32923 
(Output.create.return-address.32923)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 81 
@81
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 30 
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 63 
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 59 
@59
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 30 
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 48 
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32924
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32924 
(Output.create.return-address.32924)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 82 
@82
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 31 
@31
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 31 
@31
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 27 
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32925
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32925 
(Output.create.return-address.32925)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 83 
@83
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 30 
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 6 
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 28 
@28
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 48 
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 30 
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32926
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32926 
(Output.create.return-address.32926)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 84 
@84
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 63 
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 63 
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 45 
@45
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 30 
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32927
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32927 
(Output.create.return-address.32927)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 85 
@85
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 30 
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32928
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32928 
(Output.create.return-address.32928)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 86 
@86
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 30 
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 30 
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32929
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32929 
(Output.create.return-address.32929)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 87 
@87
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 63 
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 63 
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 63 
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 18 
@18
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32930
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32930 
(Output.create.return-address.32930)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 88 
@88
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 30 
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 30 
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 30 
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 30 
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32931
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32931 
(Output.create.return-address.32931)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 89 
@89
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 30 
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 30 
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32932
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32932 
(Output.create.return-address.32932)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 90 
@90
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 63 
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 49 
@49
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 24 
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 6 
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 35 
@35
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 63 
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32933
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32933 
(Output.create.return-address.32933)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 91 
@91
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 30 
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 6 
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 6 
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 6 
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 6 
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 6 
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 6 
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 6 
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 30 
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32934
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32934 
(Output.create.return-address.32934)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 92 
@92
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 3 
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 6 
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 24 
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 48 
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 32 
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32935
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32935 
(Output.create.return-address.32935)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 93 
@93
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 30 
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 24 
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 24 
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 24 
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 24 
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 24 
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 24 
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 24 
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 30 
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32936
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32936 
(Output.create.return-address.32936)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 94 
@94
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 8 
@8
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 28 
@28
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 54 
@54
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32937
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32937 
(Output.create.return-address.32937)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 95 
@95
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 63 
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32938
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32938 
(Output.create.return-address.32938)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 96 
@96
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 6 
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 24 
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32939
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32939 
(Output.create.return-address.32939)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 97 
@97
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 14 
@14
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 24 
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 30 
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 27 
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 27 
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 54 
@54
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32940
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32940 
(Output.create.return-address.32940)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 98 
@98
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 3 
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 3 
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 3 
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 15 
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 27 
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 30 
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32941
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32941 
(Output.create.return-address.32941)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 99 
@99
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 30 
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 3 
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 3 
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 30 
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32942
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32942 
(Output.create.return-address.32942)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 100 
@100
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 48 
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 48 
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 48 
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 60 
@60
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 54 
@54
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 30 
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32943
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32943 
(Output.create.return-address.32943)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 101 
@101
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 30 
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 63 
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 3 
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 30 
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32944
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32944 
(Output.create.return-address.32944)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 102 
@102
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 28 
@28
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 54 
@54
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 38 
@38
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 6 
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 15 
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 6 
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 6 
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 6 
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 15 
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32945
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32945 
(Output.create.return-address.32945)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 103 
@103
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 30 
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 62 
@62
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 48 
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 30 
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32946
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32946 
(Output.create.return-address.32946)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 104 
@104
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 3 
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 3 
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 3 
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 27 
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 55 
@55
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32947
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32947 
(Output.create.return-address.32947)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 105 
@105
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 14 
@14
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 30 
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32948
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32948 
(Output.create.return-address.32948)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 106 
@106
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 48 
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 48 
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 56 
@56
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 48 
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 48 
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 48 
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 48 
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 30 
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32949
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32949 
(Output.create.return-address.32949)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 107 
@107
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 3 
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 3 
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 3 
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 27 
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 15 
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 15 
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 27 
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32950
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32950 
(Output.create.return-address.32950)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 108 
@108
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 14 
@14
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 30 
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32951
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32951 
(Output.create.return-address.32951)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 109 
@109
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 29 
@29
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 63 
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 43 
@43
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 43 
@43
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 43 
@43
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 43 
@43
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32952
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32952 
(Output.create.return-address.32952)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 110 
@110
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 29 
@29
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32953
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32953 
(Output.create.return-address.32953)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 111 
@111
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 30 
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 30 
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32954
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32954 
(Output.create.return-address.32954)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 112 
@112
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 30 
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 31 
@31
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 3 
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 3 
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32955
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32955 
(Output.create.return-address.32955)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 113 
@113
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 30 
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 62 
@62
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 48 
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 48 
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32956
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32956 
(Output.create.return-address.32956)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 114 
@114
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 29 
@29
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 55 
@55
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 3 
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 3 
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 7 
@7
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32957
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32957 
(Output.create.return-address.32957)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 115 
@115
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 30 
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 6 
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 24 
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 30 
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32958
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32958 
(Output.create.return-address.32958)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 116 
@116
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 4 
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 6 
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 6 
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 15 
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 6 
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 6 
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 6 
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 54 
@54
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 28 
@28
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32959
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32959 
(Output.create.return-address.32959)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 117 
@117
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 27 
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 27 
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 27 
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 27 
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 27 
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 54 
@54
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32960
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32960 
(Output.create.return-address.32960)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 118 
@118
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 30 
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32961
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32961 
(Output.create.return-address.32961)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 119 
@119
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 63 
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 63 
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 18 
@18
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32962
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32962 
(Output.create.return-address.32962)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 120 
@120
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 30 
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 30 
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32963
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32963 
(Output.create.return-address.32963)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 121 
@121
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 62 
@62
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 48 
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 24 
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 15 
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32964
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32964 
(Output.create.return-address.32964)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 122 
@122
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 63 
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 27 
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 6 
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 51 
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 63 
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32965
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32965 
(Output.create.return-address.32965)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 123 
@123
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 56 
@56
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 7 
@7
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 56 
@56
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32966
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32966 
(Output.create.return-address.32966)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 124 
@124
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32967
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32967 
(Output.create.return-address.32967)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 125 
@125
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 7 
@7
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 56 
@56
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 7 
@7
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32968
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32968 
(Output.create.return-address.32968)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 126 
@126
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 38 
@38
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 45 
@45
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 25 
@25
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.create 12 
@Output.create.return-address.32969
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.create 
@Output.create
0;JEQ
// writeLabel Output.create.return-address.32969 
(Output.create.return-address.32969)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeReturn 
@LCL
D=M
@FRAME
M=D
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JEQ
// writeFunction Output.create 1 
// writeLabel Output.create 
(Output.create)
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 11 
@11
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Array.new 1 
@Array.new.return-address.32970
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Array.new 
@Array.new
0;JEQ
// writeLabel Array.new.return-address.32970 
(Array.new.return-address.32970)
// pop local 0 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
M=D
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push static 5 
@Output.5
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push temp 0 
@R5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0 
@SP
M=M-1
@SP
A=M
D=M
@THAT
A=M
M=D
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push argument 1 
@ARG
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push temp 0 
@R5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0 
@SP
M=M-1
@SP
A=M
D=M
@THAT
A=M
M=D
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push argument 2 
@ARG
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push temp 0 
@R5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0 
@SP
M=M-1
@SP
A=M
D=M
@THAT
A=M
M=D
// push constant 2 
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push argument 3 
@ARG
A=M
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push temp 0 
@R5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0 
@SP
M=M-1
@SP
A=M
D=M
@THAT
A=M
M=D
// push constant 3 
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push argument 4 
@ARG
A=M
A=A+1
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push temp 0 
@R5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0 
@SP
M=M-1
@SP
A=M
D=M
@THAT
A=M
M=D
// push constant 4 
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push argument 5 
@ARG
A=M
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push temp 0 
@R5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0 
@SP
M=M-1
@SP
A=M
D=M
@THAT
A=M
M=D
// push constant 5 
@5
D=A
@SP
A=M
M=D
@SP
M=M+1
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push argument 6 
@ARG
A=M
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push temp 0 
@R5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0 
@SP
M=M-1
@SP
A=M
D=M
@THAT
A=M
M=D
// push constant 6 
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push argument 7 
@ARG
A=M
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push temp 0 
@R5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0 
@SP
M=M-1
@SP
A=M
D=M
@THAT
A=M
M=D
// push constant 7 
@7
D=A
@SP
A=M
M=D
@SP
M=M+1
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push argument 8 
@ARG
A=M
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push temp 0 
@R5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0 
@SP
M=M-1
@SP
A=M
D=M
@THAT
A=M
M=D
// push constant 8 
@8
D=A
@SP
A=M
M=D
@SP
M=M+1
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push argument 9 
@ARG
A=M
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push temp 0 
@R5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0 
@SP
M=M-1
@SP
A=M
D=M
@THAT
A=M
M=D
// push constant 9 
@9
D=A
@SP
A=M
M=D
@SP
M=M+1
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push argument 10 
@ARG
A=M
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push temp 0 
@R5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0 
@SP
M=M-1
@SP
A=M
D=M
@THAT
A=M
M=D
// push constant 10 
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push argument 11 
@ARG
A=M
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push temp 0 
@R5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0 
@SP
M=M-1
@SP
A=M
D=M
@THAT
A=M
M=D
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeReturn 
@LCL
D=M
@FRAME
M=D
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JEQ
// writeFunction Output.createShiftedMap 4 
// writeLabel Output.createShiftedMap 
(Output.createShiftedMap)
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 127 
@127
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Array.new 1 
@Array.new.return-address.32971
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Array.new 
@Array.new
0;JEQ
// writeLabel Array.new.return-address.32971 
(Array.new.return-address.32971)
// pop static 6 
@SP
M=M-1
@SP
A=M
D=M
@Output.6
M=D
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop local 2 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
A=A+1
M=D
// writeLabel WHILE_EXP0 
(WHILE_EXP0)
// push local 2 
@LCL
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 127 
@127
D=A
@SP
A=M
M=D
@SP
M=M+1
// less than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187799
D;JLT
@SP
A=M
M=0
(SKIP.TO.-504187799)
@SP
M=M+1
// not 
@SP
M=M-1
@SP
A=M
D=M
M=!D
@SP
M=M+1
// writeIf WHILE_END0 
@SP
M=M-1
@SP
A=M
D=M
@WHILE_END0
D;JNE
// push local 2 
@LCL
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push static 5 
@Output.5
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push that 0 
@THAT
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop local 0 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
M=D
// push constant 11 
@11
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Array.new 1 
@Array.new.return-address.32972
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Array.new 
@Array.new
0;JEQ
// writeLabel Array.new.return-address.32972 
(Array.new.return-address.32972)
// pop local 1 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
M=D
// push local 2 
@LCL
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push static 6 
@Output.6
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push local 1 
@LCL
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push temp 0 
@R5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0 
@SP
M=M-1
@SP
A=M
D=M
@THAT
A=M
M=D
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop local 3 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
A=A+1
A=A+1
M=D
// writeLabel WHILE_EXP1 
(WHILE_EXP1)
// push local 3 
@LCL
A=M
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 11 
@11
D=A
@SP
A=M
M=D
@SP
M=M+1
// less than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187795
D;JLT
@SP
A=M
M=0
(SKIP.TO.-504187795)
@SP
M=M+1
// not 
@SP
M=M-1
@SP
A=M
D=M
M=!D
@SP
M=M+1
// writeIf WHILE_END1 
@SP
M=M-1
@SP
A=M
D=M
@WHILE_END1
D;JNE
// push local 3 
@LCL
A=M
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 1 
@LCL
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push local 3 
@LCL
A=M
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push that 0 
@THAT
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 256 
@256
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Math.multiply 2 
@Math.multiply.return-address.32973
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Math.multiply 
@Math.multiply
0;JEQ
// writeLabel Math.multiply.return-address.32973 
(Math.multiply.return-address.32973)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push temp 0 
@R5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0 
@SP
M=M-1
@SP
A=M
D=M
@THAT
A=M
M=D
// push local 3 
@LCL
A=M
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop local 3 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
A=A+1
A=A+1
M=D
// writeGoto WHILE_EXP1 
@WHILE_EXP1
0;JEQ
// writeLabel WHILE_END1 
(WHILE_END1)
// push local 2 
@LCL
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// equal 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187790
D;JEQ
@SP
A=M
M=0
(SKIP.TO.-504187790)
@SP
M=M+1
// writeIf IF_TRUE0 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE0
D;JNE
// writeGoto IF_FALSE0 
@IF_FALSE0
0;JEQ
// writeLabel IF_TRUE0 
(IF_TRUE0)
// push constant 32 
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop local 2 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
A=A+1
M=D
// writeGoto IF_END0 
@IF_END0
0;JEQ
// writeLabel IF_FALSE0 
(IF_FALSE0)
// push local 2 
@LCL
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop local 2 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
A=A+1
M=D
// writeLabel IF_END0 
(IF_END0)
// writeGoto WHILE_EXP0 
@WHILE_EXP0
0;JEQ
// writeLabel WHILE_END0 
(WHILE_END0)
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeReturn 
@LCL
D=M
@FRAME
M=D
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JEQ
// writeFunction Output.getMap 1 
// writeLabel Output.getMap 
(Output.getMap)
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 32 
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// less than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187788
D;JLT
@SP
A=M
M=0
(SKIP.TO.-504187788)
@SP
M=M+1
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 126 
@126
D=A
@SP
A=M
M=D
@SP
M=M+1
// greater than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187787
D;JGT
@SP
A=M
M=0
(SKIP.TO.-504187787)
@SP
M=M+1
// or 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D|M
@SP
M=M+1
// writeIf IF_TRUE0 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE0
D;JNE
// writeGoto IF_FALSE0 
@IF_FALSE0
0;JEQ
// writeLabel IF_TRUE0 
(IF_TRUE0)
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop argument 0 
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
// writeLabel IF_FALSE0 
(IF_FALSE0)
// push static 2 
@Output.2
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeIf IF_TRUE1 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE1
D;JNE
// writeGoto IF_FALSE1 
@IF_FALSE1
0;JEQ
// writeLabel IF_TRUE1 
(IF_TRUE1)
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push static 5 
@Output.5
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push that 0 
@THAT
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop local 0 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
M=D
// writeGoto IF_END1 
@IF_END1
0;JEQ
// writeLabel IF_FALSE1 
(IF_FALSE1)
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push static 6 
@Output.6
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push that 0 
@THAT
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop local 0 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
M=D
// writeLabel IF_END1 
(IF_END1)
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeReturn 
@LCL
D=M
@FRAME
M=D
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JEQ
// writeFunction Output.drawChar 4 
// writeLabel Output.drawChar 
(Output.drawChar)
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.getMap 1 
@Output.getMap.return-address.32974
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.getMap 
@Output.getMap
0;JEQ
// writeLabel Output.getMap.return-address.32974 
(Output.getMap.return-address.32974)
// pop local 2 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
A=A+1
M=D
// push static 1 
@Output.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop local 0 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
M=D
// writeLabel WHILE_EXP0 
(WHILE_EXP0)
// push local 1 
@LCL
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 11 
@11
D=A
@SP
A=M
M=D
@SP
M=M+1
// less than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187783
D;JLT
@SP
A=M
M=0
(SKIP.TO.-504187783)
@SP
M=M+1
// not 
@SP
M=M-1
@SP
A=M
D=M
M=!D
@SP
M=M+1
// writeIf WHILE_END0 
@SP
M=M-1
@SP
A=M
D=M
@WHILE_END0
D;JNE
// push static 2 
@Output.2
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeIf IF_TRUE0 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE0
D;JNE
// writeGoto IF_FALSE0 
@IF_FALSE0
0;JEQ
// writeLabel IF_TRUE0 
(IF_TRUE0)
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push static 4 
@Output.4
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push that 0 
@THAT
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 256 
@256
D=A
@SP
A=M
M=D
@SP
M=M+1
// neg 
@SP
M=M-1
@SP
A=M
D=M
M=-M
@SP
M=M+1
// and 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D&M
@SP
M=M+1
// pop local 3 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
A=A+1
A=A+1
M=D
// writeGoto IF_END0 
@IF_END0
0;JEQ
// writeLabel IF_FALSE0 
(IF_FALSE0)
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push static 4 
@Output.4
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push that 0 
@THAT
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 255 
@255
D=A
@SP
A=M
M=D
@SP
M=M+1
// and 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D&M
@SP
M=M+1
// pop local 3 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
A=A+1
A=A+1
M=D
// writeLabel IF_END0 
(IF_END0)
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push static 4 
@Output.4
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push local 1 
@LCL
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 2 
@LCL
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push that 0 
@THAT
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 3 
@LCL
A=M
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// or 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D|M
@SP
M=M+1
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push temp 0 
@R5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0 
@SP
M=M-1
@SP
A=M
D=M
@THAT
A=M
M=D
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 32 
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop local 0 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
M=D
// push local 1 
@LCL
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop local 1 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
M=D
// writeGoto WHILE_EXP0 
@WHILE_EXP0
0;JEQ
// writeLabel WHILE_END0 
(WHILE_END0)
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeReturn 
@LCL
D=M
@FRAME
M=D
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JEQ
// writeFunction Output.moveCursor 0 
// writeLabel Output.moveCursor 
(Output.moveCursor)
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// less than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187771
D;JLT
@SP
A=M
M=0
(SKIP.TO.-504187771)
@SP
M=M+1
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 22 
@22
D=A
@SP
A=M
M=D
@SP
M=M+1
// greater than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187770
D;JGT
@SP
A=M
M=0
(SKIP.TO.-504187770)
@SP
M=M+1
// or 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D|M
@SP
M=M+1
// push argument 1 
@ARG
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// less than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187768
D;JLT
@SP
A=M
M=0
(SKIP.TO.-504187768)
@SP
M=M+1
// or 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D|M
@SP
M=M+1
// push argument 1 
@ARG
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 63 
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// greater than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187766
D;JGT
@SP
A=M
M=0
(SKIP.TO.-504187766)
@SP
M=M+1
// or 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D|M
@SP
M=M+1
// writeIf IF_TRUE0 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE0
D;JNE
// writeGoto IF_FALSE0 
@IF_FALSE0
0;JEQ
// writeLabel IF_TRUE0 
(IF_TRUE0)
// push constant 20 
@20
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Sys.error 1 
@Sys.error.return-address.32975
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Sys.error 
@Sys.error
0;JEQ
// writeLabel Sys.error.return-address.32975 
(Sys.error.return-address.32975)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// writeLabel IF_FALSE0 
(IF_FALSE0)
// push argument 1 
@ARG
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2 
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Math.divide 2 
@Math.divide.return-address.32976
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Math.divide 
@Math.divide
0;JEQ
// writeLabel Math.divide.return-address.32976 
(Math.divide.return-address.32976)
// pop static 0 
@SP
M=M-1
@SP
A=M
D=M
@Output.0
M=D
// push constant 32 
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 352 
@352
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Math.multiply 2 
@Math.multiply.return-address.32977
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Math.multiply 
@Math.multiply
0;JEQ
// writeLabel Math.multiply.return-address.32977 
(Math.multiply.return-address.32977)
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push static 0 
@Output.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop static 1 
@SP
M=M-1
@SP
A=M
D=M
@Output.1
M=D
// push argument 1 
@ARG
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push static 0 
@Output.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2 
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Math.multiply 2 
@Math.multiply.return-address.32978
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Math.multiply 
@Math.multiply
0;JEQ
// writeLabel Math.multiply.return-address.32978 
(Math.multiply.return-address.32978)
// equal 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187762
D;JEQ
@SP
A=M
M=0
(SKIP.TO.-504187762)
@SP
M=M+1
// pop static 2 
@SP
M=M-1
@SP
A=M
D=M
@Output.2
M=D
// push constant 32 
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.drawChar 1 
@Output.drawChar.return-address.32979
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.drawChar 
@Output.drawChar
0;JEQ
// writeLabel Output.drawChar.return-address.32979 
(Output.drawChar.return-address.32979)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeReturn 
@LCL
D=M
@FRAME
M=D
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JEQ
// writeFunction Output.printChar 0 
// writeLabel Output.printChar 
(Output.printChar)
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeCall String.newLine 0 
@String.newLine.return-address.32980
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto String.newLine 
@String.newLine
0;JEQ
// writeLabel String.newLine.return-address.32980 
(String.newLine.return-address.32980)
// equal 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187761
D;JEQ
@SP
A=M
M=0
(SKIP.TO.-504187761)
@SP
M=M+1
// writeIf IF_TRUE0 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE0
D;JNE
// writeGoto IF_FALSE0 
@IF_FALSE0
0;JEQ
// writeLabel IF_TRUE0 
(IF_TRUE0)
// writeCall Output.println 0 
@Output.println.return-address.32981
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.println 
@Output.println
0;JEQ
// writeLabel Output.println.return-address.32981 
(Output.println.return-address.32981)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// writeGoto IF_END0 
@IF_END0
0;JEQ
// writeLabel IF_FALSE0 
(IF_FALSE0)
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeCall String.backSpace 0 
@String.backSpace.return-address.32982
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto String.backSpace 
@String.backSpace
0;JEQ
// writeLabel String.backSpace.return-address.32982 
(String.backSpace.return-address.32982)
// equal 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187760
D;JEQ
@SP
A=M
M=0
(SKIP.TO.-504187760)
@SP
M=M+1
// writeIf IF_TRUE1 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE1
D;JNE
// writeGoto IF_FALSE1 
@IF_FALSE1
0;JEQ
// writeLabel IF_TRUE1 
(IF_TRUE1)
// writeCall Output.backSpace 0 
@Output.backSpace.return-address.32983
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.backSpace 
@Output.backSpace
0;JEQ
// writeLabel Output.backSpace.return-address.32983 
(Output.backSpace.return-address.32983)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// writeGoto IF_END1 
@IF_END1
0;JEQ
// writeLabel IF_FALSE1 
(IF_FALSE1)
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.drawChar 1 
@Output.drawChar.return-address.32984
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.drawChar 
@Output.drawChar
0;JEQ
// writeLabel Output.drawChar.return-address.32984 
(Output.drawChar.return-address.32984)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push static 2 
@Output.2
D=M
@SP
A=M
M=D
@SP
M=M+1
// not 
@SP
M=M-1
@SP
A=M
D=M
M=!D
@SP
M=M+1
// writeIf IF_TRUE2 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE2
D;JNE
// writeGoto IF_FALSE2 
@IF_FALSE2
0;JEQ
// writeLabel IF_TRUE2 
(IF_TRUE2)
// push static 0 
@Output.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop static 0 
@SP
M=M-1
@SP
A=M
D=M
@Output.0
M=D
// push static 1 
@Output.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop static 1 
@SP
M=M-1
@SP
A=M
D=M
@Output.1
M=D
// writeLabel IF_FALSE2 
(IF_FALSE2)
// push static 0 
@Output.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 32 
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// equal 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187756
D;JEQ
@SP
A=M
M=0
(SKIP.TO.-504187756)
@SP
M=M+1
// writeIf IF_TRUE3 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE3
D;JNE
// writeGoto IF_FALSE3 
@IF_FALSE3
0;JEQ
// writeLabel IF_TRUE3 
(IF_TRUE3)
// writeCall Output.println 0 
@Output.println.return-address.32985
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.println 
@Output.println
0;JEQ
// writeLabel Output.println.return-address.32985 
(Output.println.return-address.32985)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// writeGoto IF_END3 
@IF_END3
0;JEQ
// writeLabel IF_FALSE3 
(IF_FALSE3)
// push static 2 
@Output.2
D=M
@SP
A=M
M=D
@SP
M=M+1
// not 
@SP
M=M-1
@SP
A=M
D=M
M=!D
@SP
M=M+1
// pop static 2 
@SP
M=M-1
@SP
A=M
D=M
@Output.2
M=D
// writeLabel IF_END3 
(IF_END3)
// writeLabel IF_END1 
(IF_END1)
// writeLabel IF_END0 
(IF_END0)
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeReturn 
@LCL
D=M
@FRAME
M=D
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JEQ
// writeFunction Output.printString 2 
// writeLabel Output.printString 
(Output.printString)
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeCall String.length 1 
@String.length.return-address.32986
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto String.length 
@String.length
0;JEQ
// writeLabel String.length.return-address.32986 
(String.length.return-address.32986)
// pop local 1 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
M=D
// writeLabel WHILE_EXP0 
(WHILE_EXP0)
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 1 
@LCL
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// less than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187754
D;JLT
@SP
A=M
M=0
(SKIP.TO.-504187754)
@SP
M=M+1
// not 
@SP
M=M-1
@SP
A=M
D=M
M=!D
@SP
M=M+1
// writeIf WHILE_END0 
@SP
M=M-1
@SP
A=M
D=M
@WHILE_END0
D;JNE
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeCall String.charAt 2 
@String.charAt.return-address.32987
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto String.charAt 
@String.charAt
0;JEQ
// writeLabel String.charAt.return-address.32987 
(String.charAt.return-address.32987)
// writeCall Output.printChar 1 
@Output.printChar.return-address.32988
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.printChar 
@Output.printChar
0;JEQ
// writeLabel Output.printChar.return-address.32988 
(Output.printChar.return-address.32988)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop local 0 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
M=D
// writeGoto WHILE_EXP0 
@WHILE_EXP0
0;JEQ
// writeLabel WHILE_END0 
(WHILE_END0)
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeReturn 
@LCL
D=M
@FRAME
M=D
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JEQ
// writeFunction Output.printInt 0 
// writeLabel Output.printInt 
(Output.printInt)
// push static 3 
@Output.3
D=M
@SP
A=M
M=D
@SP
M=M+1
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeCall String.setInt 2 
@String.setInt.return-address.32989
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto String.setInt 
@String.setInt
0;JEQ
// writeLabel String.setInt.return-address.32989 
(String.setInt.return-address.32989)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push static 3 
@Output.3
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.printString 1 
@Output.printString.return-address.32990
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.printString 
@Output.printString
0;JEQ
// writeLabel Output.printString.return-address.32990 
(Output.printString.return-address.32990)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeReturn 
@LCL
D=M
@FRAME
M=D
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JEQ
// writeFunction Output.println 0 
// writeLabel Output.println 
(Output.println)
// push static 1 
@Output.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 352 
@352
D=A
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push static 0 
@Output.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=M-D
@SP
M=M+1
// pop static 1 
@SP
M=M-1
@SP
A=M
D=M
@Output.1
M=D
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop static 0 
@SP
M=M-1
@SP
A=M
D=M
@Output.0
M=D
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not 
@SP
M=M-1
@SP
A=M
D=M
M=!D
@SP
M=M+1
// pop static 2 
@SP
M=M-1
@SP
A=M
D=M
@Output.2
M=D
// push static 1 
@Output.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 8128 
@8128
D=A
@SP
A=M
M=D
@SP
M=M+1
// equal 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187748
D;JEQ
@SP
A=M
M=0
(SKIP.TO.-504187748)
@SP
M=M+1
// writeIf IF_TRUE0 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE0
D;JNE
// writeGoto IF_FALSE0 
@IF_FALSE0
0;JEQ
// writeLabel IF_TRUE0 
(IF_TRUE0)
// push constant 32 
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop static 1 
@SP
M=M-1
@SP
A=M
D=M
@Output.1
M=D
// writeLabel IF_FALSE0 
(IF_FALSE0)
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeReturn 
@LCL
D=M
@FRAME
M=D
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JEQ
// writeFunction Output.backSpace 0 
// writeLabel Output.backSpace 
(Output.backSpace)
// push static 2 
@Output.2
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeIf IF_TRUE0 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE0
D;JNE
// writeGoto IF_FALSE0 
@IF_FALSE0
0;JEQ
// writeLabel IF_TRUE0 
(IF_TRUE0)
// push static 0 
@Output.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// greater than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187747
D;JGT
@SP
A=M
M=0
(SKIP.TO.-504187747)
@SP
M=M+1
// writeIf IF_TRUE1 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE1
D;JNE
// writeGoto IF_FALSE1 
@IF_FALSE1
0;JEQ
// writeLabel IF_TRUE1 
(IF_TRUE1)
// push static 0 
@Output.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=M-D
@SP
M=M+1
// pop static 0 
@SP
M=M-1
@SP
A=M
D=M
@Output.0
M=D
// push static 1 
@Output.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=M-D
@SP
M=M+1
// pop static 1 
@SP
M=M-1
@SP
A=M
D=M
@Output.1
M=D
// writeGoto IF_END1 
@IF_END1
0;JEQ
// writeLabel IF_FALSE1 
(IF_FALSE1)
// push constant 31 
@31
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop static 0 
@SP
M=M-1
@SP
A=M
D=M
@Output.0
M=D
// push static 1 
@Output.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 32 
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// equal 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187744
D;JEQ
@SP
A=M
M=0
(SKIP.TO.-504187744)
@SP
M=M+1
// writeIf IF_TRUE2 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE2
D;JNE
// writeGoto IF_FALSE2 
@IF_FALSE2
0;JEQ
// writeLabel IF_TRUE2 
(IF_TRUE2)
// push constant 8128 
@8128
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop static 1 
@SP
M=M-1
@SP
A=M
D=M
@Output.1
M=D
// writeLabel IF_FALSE2 
(IF_FALSE2)
// push static 1 
@Output.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 321 
@321
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=M-D
@SP
M=M+1
// pop static 1 
@SP
M=M-1
@SP
A=M
D=M
@Output.1
M=D
// writeLabel IF_END1 
(IF_END1)
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop static 2 
@SP
M=M-1
@SP
A=M
D=M
@Output.2
M=D
// writeGoto IF_END0 
@IF_END0
0;JEQ
// writeLabel IF_FALSE0 
(IF_FALSE0)
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not 
@SP
M=M-1
@SP
A=M
D=M
M=!D
@SP
M=M+1
// pop static 2 
@SP
M=M-1
@SP
A=M
D=M
@Output.2
M=D
// writeLabel IF_END0 
(IF_END0)
// push constant 32 
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Output.drawChar 1 
@Output.drawChar.return-address.32991
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Output.drawChar 
@Output.drawChar
0;JEQ
// writeLabel Output.drawChar.return-address.32991 
(Output.drawChar.return-address.32991)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeReturn 
@LCL
D=M
@FRAME
M=D
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JEQ
// writeFunction Screen.init 1 
// writeLabel Screen.init 
(Screen.init)
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 16384 
@16384
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop static 1 
@SP
M=M-1
@SP
A=M
D=M
@Screen.1
M=D
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not 
@SP
M=M-1
@SP
A=M
D=M
M=!D
@SP
M=M+1
// pop static 2 
@SP
M=M-1
@SP
A=M
D=M
@Screen.2
M=D
// push constant 17 
@17
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Array.new 1 
@Array.new.return-address.32992
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Array.new 
@Array.new
0;JEQ
// writeLabel Array.new.return-address.32992 
(Array.new.return-address.32992)
// pop static 0 
@SP
M=M-1
@SP
A=M
D=M
@Screen.0
M=D
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push static 0 
@Screen.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push temp 0 
@R5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0 
@SP
M=M-1
@SP
A=M
D=M
@THAT
A=M
M=D
// writeLabel WHILE_EXP0 
(WHILE_EXP0)
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 16 
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// less than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187739
D;JLT
@SP
A=M
M=0
(SKIP.TO.-504187739)
@SP
M=M+1
// not 
@SP
M=M-1
@SP
A=M
D=M
M=!D
@SP
M=M+1
// writeIf WHILE_END0 
@SP
M=M-1
@SP
A=M
D=M
@WHILE_END0
D;JNE
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop local 0 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
M=D
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push static 0 
@Screen.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=M-D
@SP
M=M+1
// push static 0 
@Screen.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push that 0 
@THAT
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=M-D
@SP
M=M+1
// push static 0 
@Screen.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push that 0 
@THAT
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push temp 0 
@R5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0 
@SP
M=M-1
@SP
A=M
D=M
@THAT
A=M
M=D
// writeGoto WHILE_EXP0 
@WHILE_EXP0
0;JEQ
// writeLabel WHILE_END0 
(WHILE_END0)
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeReturn 
@LCL
D=M
@FRAME
M=D
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JEQ
// writeFunction Screen.clearScreen 1 
// writeLabel Screen.clearScreen 
(Screen.clearScreen)
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeLabel WHILE_EXP0 
(WHILE_EXP0)
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 8192 
@8192
D=A
@SP
A=M
M=D
@SP
M=M+1
// less than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187730
D;JLT
@SP
A=M
M=0
(SKIP.TO.-504187730)
@SP
M=M+1
// not 
@SP
M=M-1
@SP
A=M
D=M
M=!D
@SP
M=M+1
// writeIf WHILE_END0 
@SP
M=M-1
@SP
A=M
D=M
@WHILE_END0
D;JNE
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push static 1 
@Screen.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push temp 0 
@R5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0 
@SP
M=M-1
@SP
A=M
D=M
@THAT
A=M
M=D
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop local 0 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
M=D
// writeGoto WHILE_EXP0 
@WHILE_EXP0
0;JEQ
// writeLabel WHILE_END0 
(WHILE_END0)
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeReturn 
@LCL
D=M
@FRAME
M=D
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JEQ
// writeFunction Screen.updateLocation 0 
// writeLabel Screen.updateLocation 
(Screen.updateLocation)
// push static 2 
@Screen.2
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeIf IF_TRUE0 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE0
D;JNE
// writeGoto IF_FALSE0 
@IF_FALSE0
0;JEQ
// writeLabel IF_TRUE0 
(IF_TRUE0)
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push static 1 
@Screen.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push static 1 
@Screen.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push that 0 
@THAT
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push argument 1 
@ARG
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// or 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D|M
@SP
M=M+1
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push temp 0 
@R5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0 
@SP
M=M-1
@SP
A=M
D=M
@THAT
A=M
M=D
// writeGoto IF_END0 
@IF_END0
0;JEQ
// writeLabel IF_FALSE0 
(IF_FALSE0)
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push static 1 
@Screen.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push static 1 
@Screen.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push that 0 
@THAT
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push argument 1 
@ARG
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// not 
@SP
M=M-1
@SP
A=M
D=M
M=!D
@SP
M=M+1
// and 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D&M
@SP
M=M+1
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push temp 0 
@R5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0 
@SP
M=M-1
@SP
A=M
D=M
@THAT
A=M
M=D
// writeLabel IF_END0 
(IF_END0)
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeReturn 
@LCL
D=M
@FRAME
M=D
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JEQ
// writeFunction Screen.setColor 0 
// writeLabel Screen.setColor 
(Screen.setColor)
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop static 2 
@SP
M=M-1
@SP
A=M
D=M
@Screen.2
M=D
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeReturn 
@LCL
D=M
@FRAME
M=D
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JEQ
// writeFunction Screen.drawPixel 3 
// writeLabel Screen.drawPixel 
(Screen.drawPixel)
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// less than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187719
D;JLT
@SP
A=M
M=0
(SKIP.TO.-504187719)
@SP
M=M+1
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 511 
@511
D=A
@SP
A=M
M=D
@SP
M=M+1
// greater than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187718
D;JGT
@SP
A=M
M=0
(SKIP.TO.-504187718)
@SP
M=M+1
// or 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D|M
@SP
M=M+1
// push argument 1 
@ARG
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// less than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187716
D;JLT
@SP
A=M
M=0
(SKIP.TO.-504187716)
@SP
M=M+1
// or 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D|M
@SP
M=M+1
// push argument 1 
@ARG
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 255 
@255
D=A
@SP
A=M
M=D
@SP
M=M+1
// greater than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187714
D;JGT
@SP
A=M
M=0
(SKIP.TO.-504187714)
@SP
M=M+1
// or 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D|M
@SP
M=M+1
// writeIf IF_TRUE0 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE0
D;JNE
// writeGoto IF_FALSE0 
@IF_FALSE0
0;JEQ
// writeLabel IF_TRUE0 
(IF_TRUE0)
// push constant 7 
@7
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Sys.error 1 
@Sys.error.return-address.32993
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Sys.error 
@Sys.error
0;JEQ
// writeLabel Sys.error.return-address.32993 
(Sys.error.return-address.32993)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// writeLabel IF_FALSE0 
(IF_FALSE0)
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 16 
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Math.divide 2 
@Math.divide.return-address.32994
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Math.divide 
@Math.divide
0;JEQ
// writeLabel Math.divide.return-address.32994 
(Math.divide.return-address.32994)
// pop local 0 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
M=D
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 16 
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Math.multiply 2 
@Math.multiply.return-address.32995
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Math.multiply 
@Math.multiply
0;JEQ
// writeLabel Math.multiply.return-address.32995 
(Math.multiply.return-address.32995)
// sub 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=M-D
@SP
M=M+1
// pop local 1 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
M=D
// push argument 1 
@ARG
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 32 
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Math.multiply 2 
@Math.multiply.return-address.32996
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Math.multiply 
@Math.multiply
0;JEQ
// writeLabel Math.multiply.return-address.32996 
(Math.multiply.return-address.32996)
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop local 2 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
A=A+1
M=D
// push local 2 
@LCL
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 1 
@LCL
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push static 0 
@Screen.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push that 0 
@THAT
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeCall Screen.updateLocation 2 
@Screen.updateLocation.return-address.32997
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Screen.updateLocation 
@Screen.updateLocation
0;JEQ
// writeLabel Screen.updateLocation.return-address.32997 
(Screen.updateLocation.return-address.32997)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeReturn 
@LCL
D=M
@FRAME
M=D
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JEQ
// writeFunction Screen.drawConditional 0 
// writeLabel Screen.drawConditional 
(Screen.drawConditional)
// push argument 2 
@ARG
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeIf IF_TRUE0 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE0
D;JNE
// writeGoto IF_FALSE0 
@IF_FALSE0
0;JEQ
// writeLabel IF_TRUE0 
(IF_TRUE0)
// push argument 1 
@ARG
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeCall Screen.drawPixel 2 
@Screen.drawPixel.return-address.32998
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Screen.drawPixel 
@Screen.drawPixel
0;JEQ
// writeLabel Screen.drawPixel.return-address.32998 
(Screen.drawPixel.return-address.32998)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// writeGoto IF_END0 
@IF_END0
0;JEQ
// writeLabel IF_FALSE0 
(IF_FALSE0)
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push argument 1 
@ARG
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeCall Screen.drawPixel 2 
@Screen.drawPixel.return-address.32999
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Screen.drawPixel 
@Screen.drawPixel
0;JEQ
// writeLabel Screen.drawPixel.return-address.32999 
(Screen.drawPixel.return-address.32999)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// writeLabel IF_END0 
(IF_END0)
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeReturn 
@LCL
D=M
@FRAME
M=D
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JEQ
// writeFunction Screen.drawLine 11 
// writeLabel Screen.drawLine 
(Screen.drawLine)
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// less than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187709
D;JLT
@SP
A=M
M=0
(SKIP.TO.-504187709)
@SP
M=M+1
// push argument 2 
@ARG
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 511 
@511
D=A
@SP
A=M
M=D
@SP
M=M+1
// greater than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187708
D;JGT
@SP
A=M
M=0
(SKIP.TO.-504187708)
@SP
M=M+1
// or 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D|M
@SP
M=M+1
// push argument 1 
@ARG
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// less than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187706
D;JLT
@SP
A=M
M=0
(SKIP.TO.-504187706)
@SP
M=M+1
// or 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D|M
@SP
M=M+1
// push argument 3 
@ARG
A=M
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 255 
@255
D=A
@SP
A=M
M=D
@SP
M=M+1
// greater than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187704
D;JGT
@SP
A=M
M=0
(SKIP.TO.-504187704)
@SP
M=M+1
// or 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D|M
@SP
M=M+1
// writeIf IF_TRUE0 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE0
D;JNE
// writeGoto IF_FALSE0 
@IF_FALSE0
0;JEQ
// writeLabel IF_TRUE0 
(IF_TRUE0)
// push constant 8 
@8
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Sys.error 1 
@Sys.error.return-address.33000
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Sys.error 
@Sys.error
0;JEQ
// writeLabel Sys.error.return-address.33000 
(Sys.error.return-address.33000)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// writeLabel IF_FALSE0 
(IF_FALSE0)
// push argument 2 
@ARG
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=M-D
@SP
M=M+1
// writeCall Math.abs 1 
@Math.abs.return-address.33001
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Math.abs 
@Math.abs
0;JEQ
// writeLabel Math.abs.return-address.33001 
(Math.abs.return-address.33001)
// pop local 3 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
A=A+1
A=A+1
M=D
// push argument 3 
@ARG
A=M
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push argument 1 
@ARG
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=M-D
@SP
M=M+1
// writeCall Math.abs 1 
@Math.abs.return-address.33002
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Math.abs 
@Math.abs
0;JEQ
// writeLabel Math.abs.return-address.33002 
(Math.abs.return-address.33002)
// pop local 2 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
A=A+1
M=D
// push local 3 
@LCL
A=M
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 2 
@LCL
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// less than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187700
D;JLT
@SP
A=M
M=0
(SKIP.TO.-504187700)
@SP
M=M+1
// pop local 6 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
M=D
// push local 6 
@LCL
A=M
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push argument 3 
@ARG
A=M
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push argument 1 
@ARG
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// less than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187699
D;JLT
@SP
A=M
M=0
(SKIP.TO.-504187699)
@SP
M=M+1
// and 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D&M
@SP
M=M+1
// push local 6 
@LCL
A=M
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// not 
@SP
M=M-1
@SP
A=M
D=M
M=!D
@SP
M=M+1
// push argument 2 
@ARG
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// less than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187696
D;JLT
@SP
A=M
M=0
(SKIP.TO.-504187696)
@SP
M=M+1
// and 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D&M
@SP
M=M+1
// or 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D|M
@SP
M=M+1
// writeIf IF_TRUE1 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE1
D;JNE
// writeGoto IF_FALSE1 
@IF_FALSE1
0;JEQ
// writeLabel IF_TRUE1 
(IF_TRUE1)
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop local 4 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
A=A+1
A=A+1
A=A+1
M=D
// push argument 2 
@ARG
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop argument 0 
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
// push local 4 
@LCL
A=M
A=A+1
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop argument 2 
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
A=A+1
A=A+1
M=D
// push argument 1 
@ARG
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop local 4 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
A=A+1
A=A+1
A=A+1
M=D
// push argument 3 
@ARG
A=M
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop argument 1 
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
A=A+1
M=D
// push local 4 
@LCL
A=M
A=A+1
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop argument 3 
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
A=A+1
A=A+1
A=A+1
M=D
// writeLabel IF_FALSE1 
(IF_FALSE1)
// push local 6 
@LCL
A=M
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeIf IF_TRUE2 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE2
D;JNE
// writeGoto IF_FALSE2 
@IF_FALSE2
0;JEQ
// writeLabel IF_TRUE2 
(IF_TRUE2)
// push local 3 
@LCL
A=M
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop local 4 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
A=A+1
A=A+1
A=A+1
M=D
// push local 2 
@LCL
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop local 3 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
A=A+1
A=A+1
M=D
// push local 4 
@LCL
A=M
A=A+1
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop local 2 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
A=A+1
M=D
// push argument 1 
@ARG
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop local 1 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
M=D
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop local 0 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
M=D
// push argument 3 
@ARG
A=M
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop local 8 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
M=D
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push argument 2 
@ARG
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// greater than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187693
D;JGT
@SP
A=M
M=0
(SKIP.TO.-504187693)
@SP
M=M+1
// pop local 7 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
M=D
// writeGoto IF_END2 
@IF_END2
0;JEQ
// writeLabel IF_FALSE2 
(IF_FALSE2)
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop local 1 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
M=D
// push argument 1 
@ARG
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop local 0 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
M=D
// push argument 2 
@ARG
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop local 8 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
M=D
// push argument 1 
@ARG
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push argument 3 
@ARG
A=M
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// greater than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187692
D;JGT
@SP
A=M
M=0
(SKIP.TO.-504187692)
@SP
M=M+1
// pop local 7 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
M=D
// writeLabel IF_END2 
(IF_END2)
// push constant 2 
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// push local 2 
@LCL
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeCall Math.multiply 2 
@Math.multiply.return-address.33003
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Math.multiply 
@Math.multiply
0;JEQ
// writeLabel Math.multiply.return-address.33003 
(Math.multiply.return-address.33003)
// push local 3 
@LCL
A=M
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=M-D
@SP
M=M+1
// pop local 5 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
M=D
// push constant 2 
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// push local 2 
@LCL
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeCall Math.multiply 2 
@Math.multiply.return-address.33004
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Math.multiply 
@Math.multiply
0;JEQ
// writeLabel Math.multiply.return-address.33004 
(Math.multiply.return-address.33004)
// pop local 9 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
M=D
// push constant 2 
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// push local 2 
@LCL
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 3 
@LCL
A=M
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=M-D
@SP
M=M+1
// writeCall Math.multiply 2 
@Math.multiply.return-address.33005
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Math.multiply 
@Math.multiply
0;JEQ
// writeLabel Math.multiply.return-address.33005 
(Math.multiply.return-address.33005)
// pop local 10 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
M=D
// push local 1 
@LCL
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 6 
@LCL
A=M
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeCall Screen.drawConditional 3 
@Screen.drawConditional.return-address.33006
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@8
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Screen.drawConditional 
@Screen.drawConditional
0;JEQ
// writeLabel Screen.drawConditional.return-address.33006 
(Screen.drawConditional.return-address.33006)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// writeLabel WHILE_EXP0 
(WHILE_EXP0)
// push local 1 
@LCL
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 8 
@LCL
A=M
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// less than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187689
D;JLT
@SP
A=M
M=0
(SKIP.TO.-504187689)
@SP
M=M+1
// not 
@SP
M=M-1
@SP
A=M
D=M
M=!D
@SP
M=M+1
// writeIf WHILE_END0 
@SP
M=M-1
@SP
A=M
D=M
@WHILE_END0
D;JNE
// push local 5 
@LCL
A=M
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// less than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187687
D;JLT
@SP
A=M
M=0
(SKIP.TO.-504187687)
@SP
M=M+1
// writeIf IF_TRUE3 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE3
D;JNE
// writeGoto IF_FALSE3 
@IF_FALSE3
0;JEQ
// writeLabel IF_TRUE3 
(IF_TRUE3)
// push local 5 
@LCL
A=M
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 9 
@LCL
A=M
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop local 5 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
M=D
// writeGoto IF_END3 
@IF_END3
0;JEQ
// writeLabel IF_FALSE3 
(IF_FALSE3)
// push local 5 
@LCL
A=M
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 10 
@LCL
A=M
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop local 5 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
M=D
// push local 7 
@LCL
A=M
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeIf IF_TRUE4 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE4
D;JNE
// writeGoto IF_FALSE4 
@IF_FALSE4
0;JEQ
// writeLabel IF_TRUE4 
(IF_TRUE4)
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=M-D
@SP
M=M+1
// pop local 0 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
M=D
// writeGoto IF_END4 
@IF_END4
0;JEQ
// writeLabel IF_FALSE4 
(IF_FALSE4)
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop local 0 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
M=D
// writeLabel IF_END4 
(IF_END4)
// writeLabel IF_END3 
(IF_END3)
// push local 1 
@LCL
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop local 1 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
M=D
// push local 1 
@LCL
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 6 
@LCL
A=M
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeCall Screen.drawConditional 3 
@Screen.drawConditional.return-address.33007
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@8
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Screen.drawConditional 
@Screen.drawConditional
0;JEQ
// writeLabel Screen.drawConditional.return-address.33007 
(Screen.drawConditional.return-address.33007)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// writeGoto WHILE_EXP0 
@WHILE_EXP0
0;JEQ
// writeLabel WHILE_END0 
(WHILE_END0)
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeReturn 
@LCL
D=M
@FRAME
M=D
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JEQ
// writeFunction Screen.drawRectangle 9 
// writeLabel Screen.drawRectangle 
(Screen.drawRectangle)
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push argument 2 
@ARG
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// greater than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187681
D;JGT
@SP
A=M
M=0
(SKIP.TO.-504187681)
@SP
M=M+1
// push argument 1 
@ARG
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push argument 3 
@ARG
A=M
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// greater than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187680
D;JGT
@SP
A=M
M=0
(SKIP.TO.-504187680)
@SP
M=M+1
// or 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D|M
@SP
M=M+1
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// less than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187678
D;JLT
@SP
A=M
M=0
(SKIP.TO.-504187678)
@SP
M=M+1
// or 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D|M
@SP
M=M+1
// push argument 2 
@ARG
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 511 
@511
D=A
@SP
A=M
M=D
@SP
M=M+1
// greater than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187676
D;JGT
@SP
A=M
M=0
(SKIP.TO.-504187676)
@SP
M=M+1
// or 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D|M
@SP
M=M+1
// push argument 1 
@ARG
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// less than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187674
D;JLT
@SP
A=M
M=0
(SKIP.TO.-504187674)
@SP
M=M+1
// or 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D|M
@SP
M=M+1
// push argument 3 
@ARG
A=M
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 255 
@255
D=A
@SP
A=M
M=D
@SP
M=M+1
// greater than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187672
D;JGT
@SP
A=M
M=0
(SKIP.TO.-504187672)
@SP
M=M+1
// or 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D|M
@SP
M=M+1
// writeIf IF_TRUE0 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE0
D;JNE
// writeGoto IF_FALSE0 
@IF_FALSE0
0;JEQ
// writeLabel IF_TRUE0 
(IF_TRUE0)
// push constant 9 
@9
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Sys.error 1 
@Sys.error.return-address.33008
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Sys.error 
@Sys.error
0;JEQ
// writeLabel Sys.error.return-address.33008 
(Sys.error.return-address.33008)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// writeLabel IF_FALSE0 
(IF_FALSE0)
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 16 
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Math.divide 2 
@Math.divide.return-address.33009
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Math.divide 
@Math.divide
0;JEQ
// writeLabel Math.divide.return-address.33009 
(Math.divide.return-address.33009)
// pop local 3 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
A=A+1
A=A+1
M=D
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 3 
@LCL
A=M
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 16 
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Math.multiply 2 
@Math.multiply.return-address.33010
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Math.multiply 
@Math.multiply
0;JEQ
// writeLabel Math.multiply.return-address.33010 
(Math.multiply.return-address.33010)
// sub 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=M-D
@SP
M=M+1
// pop local 7 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
M=D
// push argument 2 
@ARG
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 16 
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Math.divide 2 
@Math.divide.return-address.33011
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Math.divide 
@Math.divide
0;JEQ
// writeLabel Math.divide.return-address.33011 
(Math.divide.return-address.33011)
// pop local 4 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
A=A+1
A=A+1
A=A+1
M=D
// push argument 2 
@ARG
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 4 
@LCL
A=M
A=A+1
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 16 
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Math.multiply 2 
@Math.multiply.return-address.33012
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Math.multiply 
@Math.multiply
0;JEQ
// writeLabel Math.multiply.return-address.33012 
(Math.multiply.return-address.33012)
// sub 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=M-D
@SP
M=M+1
// pop local 8 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
M=D
// push local 7 
@LCL
A=M
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push static 0 
@Screen.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push that 0 
@THAT
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=M-D
@SP
M=M+1
// not 
@SP
M=M-1
@SP
A=M
D=M
M=!D
@SP
M=M+1
// pop local 6 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
M=D
// push local 8 
@LCL
A=M
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push static 0 
@Screen.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push that 0 
@THAT
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=M-D
@SP
M=M+1
// pop local 5 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
M=D
// push argument 1 
@ARG
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 32 
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Math.multiply 2 
@Math.multiply.return-address.33013
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Math.multiply 
@Math.multiply
0;JEQ
// writeLabel Math.multiply.return-address.33013 
(Math.multiply.return-address.33013)
// push local 3 
@LCL
A=M
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop local 0 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
M=D
// push local 4 
@LCL
A=M
A=A+1
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 3 
@LCL
A=M
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=M-D
@SP
M=M+1
// pop local 2 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
A=A+1
M=D
// writeLabel WHILE_EXP0 
(WHILE_EXP0)
// push argument 1 
@ARG
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push argument 3 
@ARG
A=M
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// greater than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187660
D;JGT
@SP
A=M
M=0
(SKIP.TO.-504187660)
@SP
M=M+1
// not 
@SP
M=M-1
@SP
A=M
D=M
M=!D
@SP
M=M+1
// not 
@SP
M=M-1
@SP
A=M
D=M
M=!D
@SP
M=M+1
// writeIf WHILE_END0 
@SP
M=M-1
@SP
A=M
D=M
@WHILE_END0
D;JNE
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 2 
@LCL
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop local 1 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
M=D
// push local 2 
@LCL
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// equal 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187656
D;JEQ
@SP
A=M
M=0
(SKIP.TO.-504187656)
@SP
M=M+1
// writeIf IF_TRUE1 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE1
D;JNE
// writeGoto IF_FALSE1 
@IF_FALSE1
0;JEQ
// writeLabel IF_TRUE1 
(IF_TRUE1)
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 5 
@LCL
A=M
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 6 
@LCL
A=M
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// and 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D&M
@SP
M=M+1
// writeCall Screen.updateLocation 2 
@Screen.updateLocation.return-address.33014
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Screen.updateLocation 
@Screen.updateLocation
0;JEQ
// writeLabel Screen.updateLocation.return-address.33014 
(Screen.updateLocation.return-address.33014)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// writeGoto IF_END1 
@IF_END1
0;JEQ
// writeLabel IF_FALSE1 
(IF_FALSE1)
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 6 
@LCL
A=M
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeCall Screen.updateLocation 2 
@Screen.updateLocation.return-address.33015
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Screen.updateLocation 
@Screen.updateLocation
0;JEQ
// writeLabel Screen.updateLocation.return-address.33015 
(Screen.updateLocation.return-address.33015)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop local 0 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
M=D
// writeLabel WHILE_EXP1 
(WHILE_EXP1)
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 1 
@LCL
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// less than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187653
D;JLT
@SP
A=M
M=0
(SKIP.TO.-504187653)
@SP
M=M+1
// not 
@SP
M=M-1
@SP
A=M
D=M
M=!D
@SP
M=M+1
// writeIf WHILE_END1 
@SP
M=M-1
@SP
A=M
D=M
@WHILE_END1
D;JNE
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// neg 
@SP
M=M-1
@SP
A=M
D=M
M=-M
@SP
M=M+1
// writeCall Screen.updateLocation 2 
@Screen.updateLocation.return-address.33016
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Screen.updateLocation 
@Screen.updateLocation
0;JEQ
// writeLabel Screen.updateLocation.return-address.33016 
(Screen.updateLocation.return-address.33016)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop local 0 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
M=D
// writeGoto WHILE_EXP1 
@WHILE_EXP1
0;JEQ
// writeLabel WHILE_END1 
(WHILE_END1)
// push local 1 
@LCL
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 5 
@LCL
A=M
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeCall Screen.updateLocation 2 
@Screen.updateLocation.return-address.33017
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Screen.updateLocation 
@Screen.updateLocation
0;JEQ
// writeLabel Screen.updateLocation.return-address.33017 
(Screen.updateLocation.return-address.33017)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// writeLabel IF_END1 
(IF_END1)
// push argument 1 
@ARG
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop argument 1 
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
A=A+1
M=D
// push local 1 
@LCL
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 32 
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push local 2 
@LCL
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=M-D
@SP
M=M+1
// pop local 0 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
M=D
// writeGoto WHILE_EXP0 
@WHILE_EXP0
0;JEQ
// writeLabel WHILE_END0 
(WHILE_END0)
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeReturn 
@LCL
D=M
@FRAME
M=D
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JEQ
// writeFunction Screen.drawHorizontal 11 
// writeLabel Screen.drawHorizontal 
(Screen.drawHorizontal)
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push argument 1 
@ARG
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push argument 2 
@ARG
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeCall Math.min 2 
@Math.min.return-address.33018
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Math.min 
@Math.min
0;JEQ
// writeLabel Math.min.return-address.33018 
(Math.min.return-address.33018)
// pop local 7 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
M=D
// push argument 1 
@ARG
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push argument 2 
@ARG
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeCall Math.max 2 
@Math.max.return-address.33019
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Math.max 
@Math.max
0;JEQ
// writeLabel Math.max.return-address.33019 
(Math.max.return-address.33019)
// pop local 8 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
M=D
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// neg 
@SP
M=M-1
@SP
A=M
D=M
M=-M
@SP
M=M+1
// greater than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187645
D;JGT
@SP
A=M
M=0
(SKIP.TO.-504187645)
@SP
M=M+1
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 256 
@256
D=A
@SP
A=M
M=D
@SP
M=M+1
// less than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187644
D;JLT
@SP
A=M
M=0
(SKIP.TO.-504187644)
@SP
M=M+1
// and 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D&M
@SP
M=M+1
// push local 7 
@LCL
A=M
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 512 
@512
D=A
@SP
A=M
M=D
@SP
M=M+1
// less than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187642
D;JLT
@SP
A=M
M=0
(SKIP.TO.-504187642)
@SP
M=M+1
// and 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D&M
@SP
M=M+1
// push local 8 
@LCL
A=M
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// neg 
@SP
M=M-1
@SP
A=M
D=M
M=-M
@SP
M=M+1
// greater than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187639
D;JGT
@SP
A=M
M=0
(SKIP.TO.-504187639)
@SP
M=M+1
// and 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D&M
@SP
M=M+1
// writeIf IF_TRUE0 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE0
D;JNE
// writeGoto IF_FALSE0 
@IF_FALSE0
0;JEQ
// writeLabel IF_TRUE0 
(IF_TRUE0)
// push local 7 
@LCL
A=M
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Math.max 2 
@Math.max.return-address.33020
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Math.max 
@Math.max
0;JEQ
// writeLabel Math.max.return-address.33020 
(Math.max.return-address.33020)
// pop local 7 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
M=D
// push local 8 
@LCL
A=M
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 511 
@511
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Math.min 2 
@Math.min.return-address.33021
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Math.min 
@Math.min
0;JEQ
// writeLabel Math.min.return-address.33021 
(Math.min.return-address.33021)
// pop local 8 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
M=D
// push local 7 
@LCL
A=M
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 16 
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Math.divide 2 
@Math.divide.return-address.33022
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Math.divide 
@Math.divide
0;JEQ
// writeLabel Math.divide.return-address.33022 
(Math.divide.return-address.33022)
// pop local 1 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
M=D
// push local 7 
@LCL
A=M
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 1 
@LCL
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 16 
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Math.multiply 2 
@Math.multiply.return-address.33023
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Math.multiply 
@Math.multiply
0;JEQ
// writeLabel Math.multiply.return-address.33023 
(Math.multiply.return-address.33023)
// sub 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=M-D
@SP
M=M+1
// pop local 9 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
M=D
// push local 8 
@LCL
A=M
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 16 
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Math.divide 2 
@Math.divide.return-address.33024
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Math.divide 
@Math.divide
0;JEQ
// writeLabel Math.divide.return-address.33024 
(Math.divide.return-address.33024)
// pop local 2 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
A=A+1
M=D
// push local 8 
@LCL
A=M
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 2 
@LCL
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 16 
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Math.multiply 2 
@Math.multiply.return-address.33025
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Math.multiply 
@Math.multiply
0;JEQ
// writeLabel Math.multiply.return-address.33025 
(Math.multiply.return-address.33025)
// sub 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=M-D
@SP
M=M+1
// pop local 10 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
M=D
// push local 9 
@LCL
A=M
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push static 0 
@Screen.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push that 0 
@THAT
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=M-D
@SP
M=M+1
// not 
@SP
M=M-1
@SP
A=M
D=M
M=!D
@SP
M=M+1
// pop local 5 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
M=D
// push local 10 
@LCL
A=M
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push static 0 
@Screen.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push that 0 
@THAT
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=M-D
@SP
M=M+1
// pop local 4 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
A=A+1
A=A+1
A=A+1
M=D
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 32 
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Math.multiply 2 
@Math.multiply.return-address.33026
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Math.multiply 
@Math.multiply
0;JEQ
// writeLabel Math.multiply.return-address.33026 
(Math.multiply.return-address.33026)
// push local 1 
@LCL
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop local 0 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
M=D
// push local 2 
@LCL
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 1 
@LCL
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=M-D
@SP
M=M+1
// pop local 6 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
M=D
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 6 
@LCL
A=M
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop local 3 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
A=A+1
A=A+1
M=D
// push local 6 
@LCL
A=M
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// equal 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187626
D;JEQ
@SP
A=M
M=0
(SKIP.TO.-504187626)
@SP
M=M+1
// writeIf IF_TRUE1 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE1
D;JNE
// writeGoto IF_FALSE1 
@IF_FALSE1
0;JEQ
// writeLabel IF_TRUE1 
(IF_TRUE1)
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 4 
@LCL
A=M
A=A+1
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 5 
@LCL
A=M
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// and 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D&M
@SP
M=M+1
// writeCall Screen.updateLocation 2 
@Screen.updateLocation.return-address.33027
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Screen.updateLocation 
@Screen.updateLocation
0;JEQ
// writeLabel Screen.updateLocation.return-address.33027 
(Screen.updateLocation.return-address.33027)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// writeGoto IF_END1 
@IF_END1
0;JEQ
// writeLabel IF_FALSE1 
(IF_FALSE1)
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 5 
@LCL
A=M
A=A+1
A=A+1
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeCall Screen.updateLocation 2 
@Screen.updateLocation.return-address.33028
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Screen.updateLocation 
@Screen.updateLocation
0;JEQ
// writeLabel Screen.updateLocation.return-address.33028 
(Screen.updateLocation.return-address.33028)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop local 0 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
M=D
// writeLabel WHILE_EXP0 
(WHILE_EXP0)
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 3 
@LCL
A=M
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// less than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187623
D;JLT
@SP
A=M
M=0
(SKIP.TO.-504187623)
@SP
M=M+1
// not 
@SP
M=M-1
@SP
A=M
D=M
M=!D
@SP
M=M+1
// writeIf WHILE_END0 
@SP
M=M-1
@SP
A=M
D=M
@WHILE_END0
D;JNE
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// neg 
@SP
M=M-1
@SP
A=M
D=M
M=-M
@SP
M=M+1
// writeCall Screen.updateLocation 2 
@Screen.updateLocation.return-address.33029
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Screen.updateLocation 
@Screen.updateLocation
0;JEQ
// writeLabel Screen.updateLocation.return-address.33029 
(Screen.updateLocation.return-address.33029)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop local 0 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
M=D
// writeGoto WHILE_EXP0 
@WHILE_EXP0
0;JEQ
// writeLabel WHILE_END0 
(WHILE_END0)
// push local 3 
@LCL
A=M
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 4 
@LCL
A=M
A=A+1
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeCall Screen.updateLocation 2 
@Screen.updateLocation.return-address.33030
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Screen.updateLocation 
@Screen.updateLocation
0;JEQ
// writeLabel Screen.updateLocation.return-address.33030 
(Screen.updateLocation.return-address.33030)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// writeLabel IF_END1 
(IF_END1)
// writeLabel IF_FALSE0 
(IF_FALSE0)
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeReturn 
@LCL
D=M
@FRAME
M=D
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JEQ
// writeFunction Screen.drawSymetric 0 
// writeLabel Screen.drawSymetric 
(Screen.drawSymetric)
// push argument 1 
@ARG
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push argument 3 
@ARG
A=M
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=M-D
@SP
M=M+1
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push argument 2 
@ARG
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push argument 2 
@ARG
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=M-D
@SP
M=M+1
// writeCall Screen.drawHorizontal 3 
@Screen.drawHorizontal.return-address.33031
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@8
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Screen.drawHorizontal 
@Screen.drawHorizontal
0;JEQ
// writeLabel Screen.drawHorizontal.return-address.33031 
(Screen.drawHorizontal.return-address.33031)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push argument 1 
@ARG
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push argument 3 
@ARG
A=M
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push argument 2 
@ARG
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push argument 2 
@ARG
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=M-D
@SP
M=M+1
// writeCall Screen.drawHorizontal 3 
@Screen.drawHorizontal.return-address.33032
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@8
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Screen.drawHorizontal 
@Screen.drawHorizontal
0;JEQ
// writeLabel Screen.drawHorizontal.return-address.33032 
(Screen.drawHorizontal.return-address.33032)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push argument 1 
@ARG
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push argument 2 
@ARG
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=M-D
@SP
M=M+1
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push argument 3 
@ARG
A=M
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=M-D
@SP
M=M+1
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push argument 3 
@ARG
A=M
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// writeCall Screen.drawHorizontal 3 
@Screen.drawHorizontal.return-address.33033
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@8
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Screen.drawHorizontal 
@Screen.drawHorizontal
0;JEQ
// writeLabel Screen.drawHorizontal.return-address.33033 
(Screen.drawHorizontal.return-address.33033)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push argument 1 
@ARG
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push argument 2 
@ARG
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push argument 3 
@ARG
A=M
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=M-D
@SP
M=M+1
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push argument 3 
@ARG
A=M
A=A+1
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// writeCall Screen.drawHorizontal 3 
@Screen.drawHorizontal.return-address.33034
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@8
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Screen.drawHorizontal 
@Screen.drawHorizontal
0;JEQ
// writeLabel Screen.drawHorizontal.return-address.33034 
(Screen.drawHorizontal.return-address.33034)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeReturn 
@LCL
D=M
@FRAME
M=D
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JEQ
// writeFunction Screen.drawCircle 3 
// writeLabel Screen.drawCircle 
(Screen.drawCircle)
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// less than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187607
D;JLT
@SP
A=M
M=0
(SKIP.TO.-504187607)
@SP
M=M+1
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 511 
@511
D=A
@SP
A=M
M=D
@SP
M=M+1
// greater than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187606
D;JGT
@SP
A=M
M=0
(SKIP.TO.-504187606)
@SP
M=M+1
// or 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D|M
@SP
M=M+1
// push argument 1 
@ARG
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// less than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187604
D;JLT
@SP
A=M
M=0
(SKIP.TO.-504187604)
@SP
M=M+1
// or 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D|M
@SP
M=M+1
// push argument 1 
@ARG
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 255 
@255
D=A
@SP
A=M
M=D
@SP
M=M+1
// greater than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187602
D;JGT
@SP
A=M
M=0
(SKIP.TO.-504187602)
@SP
M=M+1
// or 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D|M
@SP
M=M+1
// writeIf IF_TRUE0 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE0
D;JNE
// writeGoto IF_FALSE0 
@IF_FALSE0
0;JEQ
// writeLabel IF_TRUE0 
(IF_TRUE0)
// push constant 12 
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Sys.error 1 
@Sys.error.return-address.33035
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Sys.error 
@Sys.error
0;JEQ
// writeLabel Sys.error.return-address.33035 
(Sys.error.return-address.33035)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// writeLabel IF_FALSE0 
(IF_FALSE0)
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push argument 2 
@ARG
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=M-D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// less than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187599
D;JLT
@SP
A=M
M=0
(SKIP.TO.-504187599)
@SP
M=M+1
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push argument 2 
@ARG
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push constant 511 
@511
D=A
@SP
A=M
M=D
@SP
M=M+1
// greater than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187597
D;JGT
@SP
A=M
M=0
(SKIP.TO.-504187597)
@SP
M=M+1
// or 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D|M
@SP
M=M+1
// push argument 1 
@ARG
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push argument 2 
@ARG
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=M-D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// less than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187594
D;JLT
@SP
A=M
M=0
(SKIP.TO.-504187594)
@SP
M=M+1
// or 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D|M
@SP
M=M+1
// push argument 1 
@ARG
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push argument 2 
@ARG
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push constant 255 
@255
D=A
@SP
A=M
M=D
@SP
M=M+1
// greater than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187591
D;JGT
@SP
A=M
M=0
(SKIP.TO.-504187591)
@SP
M=M+1
// or 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D|M
@SP
M=M+1
// writeIf IF_TRUE1 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE1
D;JNE
// writeGoto IF_FALSE1 
@IF_FALSE1
0;JEQ
// writeLabel IF_TRUE1 
(IF_TRUE1)
// push constant 13 
@13
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Sys.error 1 
@Sys.error.return-address.33036
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Sys.error 
@Sys.error
0;JEQ
// writeLabel Sys.error.return-address.33036 
(Sys.error.return-address.33036)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// writeLabel IF_FALSE1 
(IF_FALSE1)
// push argument 2 
@ARG
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop local 1 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
M=D
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// push argument 2 
@ARG
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=M-D
@SP
M=M+1
// pop local 2 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
A=A+1
M=D
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push argument 1 
@ARG
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 1 
@LCL
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeCall Screen.drawSymetric 4 
@Screen.drawSymetric.return-address.33037
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@9
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Screen.drawSymetric 
@Screen.drawSymetric
0;JEQ
// writeLabel Screen.drawSymetric.return-address.33037 
(Screen.drawSymetric.return-address.33037)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// writeLabel WHILE_EXP0 
(WHILE_EXP0)
// push local 1 
@LCL
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// greater than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187588
D;JGT
@SP
A=M
M=0
(SKIP.TO.-504187588)
@SP
M=M+1
// not 
@SP
M=M-1
@SP
A=M
D=M
M=!D
@SP
M=M+1
// writeIf WHILE_END0 
@SP
M=M-1
@SP
A=M
D=M
@WHILE_END0
D;JNE
// push local 2 
@LCL
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// less than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187586
D;JLT
@SP
A=M
M=0
(SKIP.TO.-504187586)
@SP
M=M+1
// writeIf IF_TRUE2 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE2
D;JNE
// writeGoto IF_FALSE2 
@IF_FALSE2
0;JEQ
// writeLabel IF_TRUE2 
(IF_TRUE2)
// push local 2 
@LCL
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2 
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeCall Math.multiply 2 
@Math.multiply.return-address.33038
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Math.multiply 
@Math.multiply
0;JEQ
// writeLabel Math.multiply.return-address.33038 
(Math.multiply.return-address.33038)
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push constant 3 
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop local 2 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
A=A+1
M=D
// writeGoto IF_END2 
@IF_END2
0;JEQ
// writeLabel IF_FALSE2 
(IF_FALSE2)
// push local 2 
@LCL
A=M
A=A+1
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2 
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 1 
@LCL
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=M-D
@SP
M=M+1
// writeCall Math.multiply 2 
@Math.multiply.return-address.33039
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Math.multiply 
@Math.multiply
0;JEQ
// writeLabel Math.multiply.return-address.33039 
(Math.multiply.return-address.33039)
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push constant 5 
@5
D=A
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop local 2 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
A=A+1
M=D
// push local 1 
@LCL
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=M-D
@SP
M=M+1
// pop local 1 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
M=D
// writeLabel IF_END2 
(IF_END2)
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop local 0 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
M=D
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push argument 1 
@ARG
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 1 
@LCL
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeCall Screen.drawSymetric 4 
@Screen.drawSymetric.return-address.33040
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@9
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Screen.drawSymetric 
@Screen.drawSymetric
0;JEQ
// writeLabel Screen.drawSymetric.return-address.33040 
(Screen.drawSymetric.return-address.33040)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// writeGoto WHILE_EXP0 
@WHILE_EXP0
0;JEQ
// writeLabel WHILE_END0 
(WHILE_END0)
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeReturn 
@LCL
D=M
@FRAME
M=D
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JEQ
// writeFunction Memory.init 0 
// writeLabel Memory.init 
(Memory.init)
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop static 0 
@SP
M=M-1
@SP
A=M
D=M
@Memory.0
M=D
// push constant 2048 
@2048
D=A
@SP
A=M
M=D
@SP
M=M+1
// push static 0 
@Memory.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push constant 14334 
@14334
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push temp 0 
@R5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0 
@SP
M=M-1
@SP
A=M
D=M
@THAT
A=M
M=D
// push constant 2049 
@2049
D=A
@SP
A=M
M=D
@SP
M=M+1
// push static 0 
@Memory.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push constant 2050 
@2050
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push temp 0 
@R5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0 
@SP
M=M-1
@SP
A=M
D=M
@THAT
A=M
M=D
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeReturn 
@LCL
D=M
@FRAME
M=D
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JEQ
// writeFunction Memory.peek 0 
// writeLabel Memory.peek 
(Memory.peek)
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push static 0 
@Memory.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push that 0 
@THAT
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// writeReturn 
@LCL
D=M
@FRAME
M=D
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JEQ
// writeFunction Memory.poke 0 
// writeLabel Memory.poke 
(Memory.poke)
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push static 0 
@Memory.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push argument 1 
@ARG
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push temp 0 
@R5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0 
@SP
M=M-1
@SP
A=M
D=M
@THAT
A=M
M=D
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeReturn 
@LCL
D=M
@FRAME
M=D
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JEQ
// writeFunction Memory.alloc 1 
// writeLabel Memory.alloc 
(Memory.alloc)
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// less than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187574
D;JLT
@SP
A=M
M=0
(SKIP.TO.-504187574)
@SP
M=M+1
// writeIf IF_TRUE0 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE0
D;JNE
// writeGoto IF_FALSE0 
@IF_FALSE0
0;JEQ
// writeLabel IF_TRUE0 
(IF_TRUE0)
// push constant 5 
@5
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Sys.error 1 
@Sys.error.return-address.33041
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Sys.error 
@Sys.error
0;JEQ
// writeLabel Sys.error.return-address.33041 
(Sys.error.return-address.33041)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// writeLabel IF_FALSE0 
(IF_FALSE0)
// push constant 2048 
@2048
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop local 0 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
M=D
// writeLabel WHILE_EXP0 
(WHILE_EXP0)
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push that 0 
@THAT
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// less than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187572
D;JLT
@SP
A=M
M=0
(SKIP.TO.-504187572)
@SP
M=M+1
// not 
@SP
M=M-1
@SP
A=M
D=M
M=!D
@SP
M=M+1
// writeIf WHILE_END0 
@SP
M=M-1
@SP
A=M
D=M
@WHILE_END0
D;JNE
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push that 0 
@THAT
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop local 0 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
M=D
// writeGoto WHILE_EXP0 
@WHILE_EXP0
0;JEQ
// writeLabel WHILE_END0 
(WHILE_END0)
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push constant 16379 
@16379
D=A
@SP
A=M
M=D
@SP
M=M+1
// greater than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187568
D;JGT
@SP
A=M
M=0
(SKIP.TO.-504187568)
@SP
M=M+1
// writeIf IF_TRUE1 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE1
D;JNE
// writeGoto IF_FALSE1 
@IF_FALSE1
0;JEQ
// writeLabel IF_TRUE1 
(IF_TRUE1)
// push constant 6 
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeCall Sys.error 1 
@Sys.error.return-address.33042
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
// writeGoto Sys.error 
@Sys.error
0;JEQ
// writeLabel Sys.error.return-address.33042 
(Sys.error.return-address.33042)
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// writeLabel IF_FALSE1 
(IF_FALSE1)
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push that 0 
@THAT
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2 
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// greater than 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187565
D;JGT
@SP
A=M
M=0
(SKIP.TO.-504187565)
@SP
M=M+1
// writeIf IF_TRUE2 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE2
D;JNE
// writeGoto IF_FALSE2 
@IF_FALSE2
0;JEQ
// writeLabel IF_TRUE2 
(IF_TRUE2)
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2 
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push that 0 
@THAT
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=M-D
@SP
M=M+1
// push constant 2 
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=M-D
@SP
M=M+1
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push temp 0 
@R5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0 
@SP
M=M-1
@SP
A=M
D=M
@THAT
A=M
M=D
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push that 0 
@THAT
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2 
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// equal 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187557
D;JEQ
@SP
A=M
M=0
(SKIP.TO.-504187557)
@SP
M=M+1
// writeIf IF_TRUE3 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE3
D;JNE
// writeGoto IF_FALSE3 
@IF_FALSE3
0;JEQ
// writeLabel IF_TRUE3 
(IF_TRUE3)
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 3 
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push constant 4 
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push temp 0 
@R5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0 
@SP
M=M-1
@SP
A=M
D=M
@THAT
A=M
M=D
// writeGoto IF_END3 
@IF_END3
0;JEQ
// writeLabel IF_FALSE3 
(IF_FALSE3)
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 3 
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push that 0 
@THAT
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push temp 0 
@R5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0 
@SP
M=M-1
@SP
A=M
D=M
@THAT
A=M
M=D
// writeLabel IF_END3 
(IF_END3)
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push constant 2 
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push temp 0 
@R5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0 
@SP
M=M-1
@SP
A=M
D=M
@THAT
A=M
M=D
// writeLabel IF_FALSE2 
(IF_FALSE2)
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push temp 0 
@R5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0 
@SP
M=M-1
@SP
A=M
D=M
@THAT
A=M
M=D
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2 
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// writeReturn 
@LCL
D=M
@FRAME
M=D
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JEQ
// writeFunction Memory.deAlloc 2 
// writeLabel Memory.deAlloc 
(Memory.deAlloc)
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push argument 0 
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2 
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=M-D
@SP
M=M+1
// pop local 0 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
M=D
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push that 0 
@THAT
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop local 1 
@SP
M=M-1
@SP
A=M
D=M
@LCL
A=M
A=A+1
M=D
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push local 1 
@LCL
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push that 0 
@THAT
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// equal 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187541
D;JEQ
@SP
A=M
M=0
(SKIP.TO.-504187541)
@SP
M=M+1
// writeIf IF_TRUE0 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE0
D;JNE
// writeGoto IF_FALSE0 
@IF_FALSE0
0;JEQ
// writeLabel IF_TRUE0 
(IF_TRUE0)
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push that 0 
@THAT
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=M-D
@SP
M=M+1
// push constant 2 
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=M-D
@SP
M=M+1
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push temp 0 
@R5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0 
@SP
M=M-1
@SP
A=M
D=M
@THAT
A=M
M=D
// writeGoto IF_END0 
@IF_END0
0;JEQ
// writeLabel IF_FALSE0 
(IF_FALSE0)
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push that 0 
@THAT
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=M-D
@SP
M=M+1
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push local 1 
@LCL
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push that 0 
@THAT
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push temp 0 
@R5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0 
@SP
M=M-1
@SP
A=M
D=M
@THAT
A=M
M=D
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// push local 1 
@LCL
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push that 0 
@THAT
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 1 
@LCL
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2 
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// equal 
@SP
M=M-1
@SP
A=M
@SP
M=M-1
@SP
A=M
D=M-D
M=-1
@SKIP.TO.-504187529
D;JEQ
@SP
A=M
M=0
(SKIP.TO.-504187529)
@SP
M=M+1
// writeIf IF_TRUE1 
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE1
D;JNE
// writeGoto IF_FALSE1 
@IF_FALSE1
0;JEQ
// writeLabel IF_TRUE1 
(IF_TRUE1)
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2 
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push temp 0 
@R5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0 
@SP
M=M-1
@SP
A=M
D=M
@THAT
A=M
M=D
// writeGoto IF_END1 
@IF_END1
0;JEQ
// writeLabel IF_FALSE1 
(IF_FALSE1)
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// push local 0 
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// push constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// push local 1 
@LCL
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push that 0 
@THAT
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop temp 0 
@SP
M=M-1
@SP
A=M
D=M
@R5
M=D
// pop pointer 1 
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// push temp 0 
@R5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0 
@SP
M=M-1
@SP
A=M
D=M
@THAT
A=M
M=D
// writeLabel IF_END1 
(IF_END1)
// writeLabel IF_END0 
(IF_END0)
// push constant 0 
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// writeReturn 
@LCL
D=M
@FRAME
M=D
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JEQ
(END)
@END
0;JEQ
